import{_ as r,E as o,c as l,J as t,V as h,m as a,a as i,o as n}from"./chunks/framework.cwIXGwyx.js";const T=JSON.parse('{"title":"算法","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/intro.md","filePath":"直击概念/03algo/intro.md","lastUpdated":1708674619000}'),s={name:"直击概念/03algo/intro.md"},d=h('<blockquote><p>由于个人时间有限，这部分目前还没有来得及整理，我会在后续慢慢完善，请您谅解。 我暂时列出一个简单的待整理大纲。欢迎 Fork 本项目，和我一起来完善。</p></blockquote><h1 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">💡加油</p><p>作为一名前端，在这块可能相对薄弱。在整理这块虽然有些畏惧，但想着既然要做了，那就带着重零学习的心态来面对，祝大家也克服恐惧，早上找到理想的工作。</p></div><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h2><p>数据结构（data structure）是计算机中<code>存储、组织数据的方式</code>。</p><p>数据结构是一种具有一定逻辑关系，在计算机中应用某种存储结构，并且封装了相应操作的数据元素集合。它包含三方面的内容，<code>逻辑关系</code>、<code>存储关系</code>及<code>操作</code>。</p><p>不同种类的数据结构适合于不同种类的应用，而部分甚至专门用于特定的作业任务。例如，计算机网络依赖于路由表运作，B 树高度适用于数据库的封装。</p><h2 id="算法复杂度" tabindex="-1">算法复杂度 <a class="header-anchor" href="#算法复杂度" aria-label="Permalink to &quot;算法复杂度&quot;">​</a></h2><h3 id="时间复杂度-一个算法执行所耗费的时间。" tabindex="-1">时间复杂度：一个算法执行所耗费的时间。 <a class="header-anchor" href="#时间复杂度-一个算法执行所耗费的时间。" aria-label="Permalink to &quot;时间复杂度：一个算法执行所耗费的时间。&quot;">​</a></h3><h3 id="空间复杂度-运行完一个程序所需内存的大小。" tabindex="-1">空间复杂度：运行完一个程序所需内存的大小。 <a class="header-anchor" href="#空间复杂度-运行完一个程序所需内存的大小。" aria-label="Permalink to &quot;空间复杂度：运行完一个程序所需内存的大小。&quot;">​</a></h3><ul><li><p><a href="https://www.zhihu.com/question/21387264/answer/422323594" target="_blank" rel="noreferrer">如何理解算法时间复杂度的表示法，例如 O(n²)、O(n)、O(1)、O(nlogn) 等？</a></p></li><li><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F50479555" target="_blank" rel="noreferrer">算法的时间与空间复杂度（一看就懂）</a></p></li></ul><h2 id="常见的数据结构" tabindex="-1">常见的数据结构 <a class="header-anchor" href="#常见的数据结构" aria-label="Permalink to &quot;常见的数据结构&quot;">​</a></h2><h3 id="栈-stack" tabindex="-1">栈（Stack） <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈（Stack）&quot;">​</a></h3><p>栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。</p><h3 id="队列-queue" tabindex="-1">队列（Queue） <a class="header-anchor" href="#队列-queue" aria-label="Permalink to &quot;队列（Queue）&quot;">​</a></h3><p>队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。</p><h3 id="数组-array" tabindex="-1">数组（Array） <a class="header-anchor" href="#数组-array" aria-label="Permalink to &quot;数组（Array）&quot;">​</a></h3><p>数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。</p><h3 id="链表-linked-list" tabindex="-1">链表（Linked List） <a class="header-anchor" href="#链表-linked-list" aria-label="Permalink to &quot;链表（Linked List）&quot;">​</a></h3><p>链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。</p><h3 id="树-tree" tabindex="-1">树（Tree） <a class="header-anchor" href="#树-tree" aria-label="Permalink to &quot;树（Tree）&quot;">​</a></h3><p>树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。</p><h3 id="图-graph" tabindex="-1">图（Graph） <a class="header-anchor" href="#图-graph" aria-label="Permalink to &quot;图（Graph）&quot;">​</a></h3><p>图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。</p><h3 id="堆-heap" tabindex="-1">堆（Heap） <a class="header-anchor" href="#堆-heap" aria-label="Permalink to &quot;堆（Heap）&quot;">​</a></h3><p>堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。</p><h3 id="散列表-hash-table" tabindex="-1">散列表（Hash table） <a class="header-anchor" href="#散列表-hash-table" aria-label="Permalink to &quot;散列表（Hash table）&quot;">​</a></h3><p>散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和 T 相等的记录，那么必定在 F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录。</p><h2 id="常用算法" tabindex="-1">常用算法 <a class="header-anchor" href="#常用算法" aria-label="Permalink to &quot;常用算法&quot;">​</a></h2><p>数据结构研究的内容：就是如何<code>按一定的逻辑结构</code>，把数据组织起来，并<code>选择适当的存储表示方法</code>把逻辑结构组织好的数据<code>存储到计算机的存储器</code>里。算法研究的目的是为了更有效的处理数据，提高数据运算效率。数据的运算是定义在数据的逻辑结构上，但运算的具体实现要在存储结构上进行。</p><p>一般有以下几种常用运算：</p><h3 id="检索" tabindex="-1">检索 <a class="header-anchor" href="#检索" aria-label="Permalink to &quot;检索&quot;">​</a></h3><p>检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。</p><h3 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h3><p>往数据结构中增加新的节点。</p><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><p>把指定的结点从数据结构中去掉。</p><h3 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h3><p>改变指定节点的一个或多个字段的值。</p><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><p>把节点按某种指定的顺序重新排列。例如递增或递减。</p><h2 id="十大排序" tabindex="-1">十大排序 <a class="header-anchor" href="#十大排序" aria-label="Permalink to &quot;十大排序&quot;">​</a></h2>',42),c=a("p",null,"图片名词解释：",-1),u=a("ul",null,[a("li",null,"n: 数据规模"),a("li",null,"k: “桶”的个数"),a("li",null,"In-place: 占用常数内存，不占用额外内存"),a("li",null,"Out-place: 占用额外内存")],-1),p=a("h2",{id:"参考资料",tabindex:"-1"},[i("参考资料 "),a("a",{class:"header-anchor",href:"#参考资料","aria-label":'Permalink to "参考资料"'},"​")],-1),b=a("ul",null,[a("li",null,[a("a",{href:"https://www.runoob.com/data-structures/data-structures-tutorial.html",target:"_blank",rel:"noreferrer"},"RUNOOB-数据结构与算法")])],-1);function q(k,m,_,f,x,P){const e=o("Image");return n(),l("div",null,[d,t(e,{src:"/03algo/sort10th.png",alt:"十大排序对比"}),c,u,t(e,{src:"/03algo/sort-type.png",alt:"十大排序分类"}),p,b])}const O=r(s,[["render",q]]);export{T as __pageData,O as default};
