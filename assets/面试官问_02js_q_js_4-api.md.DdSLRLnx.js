import{_ as a,c as s,o as i,V as e}from"./chunks/framework.CMKosmpS.js";const u=JSON.parse('{"title":"Web API","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/02js/q_js_4-api.md","filePath":"面试官问/02js/q_js_4-api.md","lastUpdated":1724141323000}'),n={name:"面试官问/02js/q_js_4-api.md"},l=e(`<h1 id="web-api" tabindex="-1">Web API <a class="header-anchor" href="#web-api" aria-label="Permalink to &quot;Web API&quot;">​</a></h1><h2 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h2><h3 id="for-in-和-for-of-的区别" tabindex="-1">for in 和 for of 的区别 <a class="header-anchor" href="#for-in-和-for-of-的区别" aria-label="Permalink to &quot;for in 和 for of 的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>遍历 Map/Set/generator 数组/字符串：用 <code>for of（可迭代）</code>，得到 value</li><li>遍历对象/数组/字符串：用 <code>for in（可枚举数据）</code>，得到 key</li><li>for in 会<code>遍历对象的整个原型链</code>，性能非常差不推荐使用，而 for of 只<code>遍历当前对象不会遍历原型链</code>；</li><li>for of 遍历获取的是对象的<code>键值</code>，for in 获取的是对象的<code>键名</code>；</li></ul><blockquote><p>总结： for in 循环主要是为了遍历对象而生，不适用于遍历数组；for of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p></blockquote></details><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><h3 id="foreach-和-map-的区别" tabindex="-1">forEach 和 map 的区别 <a class="header-anchor" href="#foreach-和-map-的区别" aria-label="Permalink to &quot;forEach 和 map 的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ol><li><code>forEach() 没有返回值</code>，而 <code>map() 有返回值</code>。</li><li>forEach 遍历通常都是直接引入当前遍历数组的内存地址，<code>会改变原数组</code>，生成的数组的值发生变化，当前遍历的数组对应的值也会发生变化。类似于浅拷贝</li><li>map 遍历的后的数组通常都是<code>生成一个新的数组</code>，新的数组的值发生变化，当前遍历的数组值不会变化。 地址和值都改变 类似于深拷贝。</li><li>总的来说 map 的速度大于 forEach，性能上来说 for &gt; forEach &gt; map</li></ol></details><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><h3 id="documentfragment" tabindex="-1">DocumentFragment <a class="header-anchor" href="#documentfragment" aria-label="Permalink to &quot;DocumentFragment&quot;">​</a></h3><p>是 Web API 中的一种节点类型，它是一个轻量级的文档对象，可以用来存储临时节点，而不会直接影响到 DOM 树的结构。</p><details class="details custom-block"><summary>详细信息</summary><p>使用场景：</p><ul><li>批量操作：当个要添加多个节点到 DOM 树时，使用 DocumentFragment 可以将这些节点预先对方在一个轻量级对象中，一次性添加，减少 DOM 操作</li><li>离屏操作：如需创建复杂 DOM 结构，可通过 DocumentFragment 在不触发页面重排和重绘的情况下进行</li><li>内容填充：在填充 DOM 元素内容之前，可以先创建一个 DocumentFragment 完成所有节点的添加和排序，然后把它添加到 DOM 树中</li><li>避免内存泄漏</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建多个节点或元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将节点添加到DocumentFragment中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(div)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一次性将DocumentFragment添加到DOM树中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></details><p>DocumentFragment 提供了一个高效的方式去操作 DOM 而不影响页面的渲染性能，在很多需要进行批量 DOM 操作的场合很有用。</p><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h2><h3 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h3><p>requestIdleCallback 是一个 Web API，它允许开发者请求浏览器在主线程空闲时执行一些低优先级的后台任务。该方法可提高用户的响应性和页面的整体性能。</p><p>什么时候使用？</p><p>适合不直接关联用户交互及响应的人物，这些人物可以延后执行不会影响用户体验，如：</p><ul><li>清理工作：如标记的 DOM 节点删除，数据的本场存储同步等</li><li>非关键的解析：如解析大量数据</li><li>状态更新：如发送不紧急的状态变更</li></ul><p>如何使用？</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myNonCriticalFucntion 浏览器空闲时执行的函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// timeout 可选，回调执行时间的上线，若超市浏览器在下次空闲时执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myNonCriticalFucntion, { timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,20),t=[l];function r(h,p,o,d,k,c){return i(),s("div",null,t)}const b=a(n,[["render",r]]);export{u as __pageData,b as default};
