import{_ as t,E as o,c as l,J as i,V as e,o as s}from"./chunks/framework.VAJu91au.js";const g=JSON.parse('{"title":"Vue 生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/07vue/s_vue_2-lifecycle.md","filePath":"直击概念/07vue/s_vue_2-lifecycle.md","lastUpdated":1708674619000}'),r={name:"直击概念/07vue/s_vue_2-lifecycle.md"},n=e('<h1 id="vue-生命周期" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;Vue 生命周期&quot;">​</a></h1><blockquote><p>你看 Vue 源码干嘛？你使用 Vue 又不需要它的源码，你只需要会用就行了 —— 尤大 （说得很有道理，但不卷找不到工作）</p></blockquote><h2 id="vue-的生命周期到底是什么" tabindex="-1">Vue 的生命周期到底是什么 <a class="header-anchor" href="#vue-的生命周期到底是什么" aria-label="Permalink to &quot;Vue 的生命周期到底是什么&quot;">​</a></h2><ul><li>简单来说，是用来描述一个组件<code>从创建到销毁</code>的全过程。</li><li>那复杂来说呢？ 就是一个<strong>组件从创建开始经历了数据初始化，挂载，更新等步骤后，最后被销毁</strong>这一完整过程。</li></ul>',4),d=e('<h3 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-label="Permalink to &quot;挂载阶段&quot;">​</a></h3><ul><li><code>beforeCreate</code> 是最先的，并且在此时的状态下，我们打印的信息什么都拿不到</li><li>之后进入了 <code>created</code> 状态，在这个状态中我们的 el，也就是 Dom 元素依旧是拿不到的，但是我们已经可以拿到 data 了，这意味着 created 已经将数据加载进来了 ，已经为这个 Vue 实例开辟了内存空间。</li><li><code>beforeMount</code>，DOM 挂载前状态，挂载就是将虚拟 Dom 转变成真实 Dom 的过程，所以在这之前，我们的 el 当然还是拿不到的。</li><li><code>mounted</code>，挂载结束，意味着虚拟 Dom 已经挂载在了真实的元素上，所以从此开始我们就可以拿到 el 了。我们可以用 console.dir 去打印一些我们需要的元素的属性。</li><li>至此，我们的挂载阶段就结束了。</li></ul><h3 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-label="Permalink to &quot;更新阶段&quot;">​</a></h3><p>每当我们去改变页面元素的时候，就会进入更新阶段，也就是 <code>beforeUpdate</code> , <code>updated</code> 这两个状态。</p><h3 id="销毁阶段" tabindex="-1">销毁阶段 <a class="header-anchor" href="#销毁阶段" aria-label="Permalink to &quot;销毁阶段&quot;">​</a></h3><ul><li><code>beforeDestroy</code>，销毁前状态，在销毁之前，所以我们的元素、data 都是如同挂载之后的阶段一样，都是可以打印出来的。</li><li><code>destroyed</code>，销毁完成的状态，我以为销毁了，那应该什么都打印不出来了，其实不然，他还是什么都可以打印出来的。</li><li><code>beforeDestroy</code> 和 <code>destroyed</code>，组件离开（卸载时）被调用。</li></ul><h2 id="生命周期的每个阶段适合做什么" tabindex="-1">生命周期的每个阶段适合做什么 <a class="header-anchor" href="#生命周期的每个阶段适合做什么" aria-label="Permalink to &quot;生命周期的每个阶段适合做什么&quot;">​</a></h2><h3 id="created" tabindex="-1">created <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created&quot;">​</a></h3><p>在 Vue 实例创建完毕状态，我们可以去访问 data、computed、watch、methods 上的方法和数据，但现在还没有将虚拟 Dom 挂载到真实 Dom 上，所以我们在此时访问不到我们的 Dom 元素（el 属性，ref 属性此时都为空）。</p><blockquote><p>我们可以进行一些简单的 Ajax，并可以对页面进行初始化之类的操作</p></blockquote><h3 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h3><p>它是在挂载之前被调用的，会在此时去找到虚拟 Dom，并将其编译成 Render</p><h3 id="mounted" tabindex="-1">mounted <a class="header-anchor" href="#mounted" aria-label="Permalink to &quot;mounted&quot;">​</a></h3><p>虚拟 Dom 已经被挂载到真实 Dom 上，此时我们可以获取 Dom 节点，$ref 在此时也是可以访问的。</p><blockquote><p>我们在此时可以去获取节点信息，做 Ajax 请求，对节点做一些操作</p></blockquote><h3 id="beforeupdate" tabindex="-1">beforeupdate <a class="header-anchor" href="#beforeupdate" aria-label="Permalink to &quot;beforeupdate&quot;">​</a></h3><p>响应式数据更新的时候会被调用，beforeupdate 的阶段虚拟 Dom 还没更新，所以在此时依旧可以访问现有的 Dom。</p><blockquote><p>我们可以在此时访问现有的 Dom，手动移除一些添加的监听事件</p></blockquote><h3 id="updated" tabindex="-1">updated <a class="header-anchor" href="#updated" aria-label="Permalink to &quot;updated&quot;">​</a></h3><p>此时补丁已经打完了，Dom 已经更新完毕，可以执行一些依赖新 Dom 的操作。</p><blockquote><p>注：若进行数据等敏感操作，请避免和防止死循环等造成的内存溢出</p></blockquote><h3 id="beforedestroy" tabindex="-1">beforeDestroy <a class="header-anchor" href="#beforedestroy" aria-label="Permalink to &quot;beforeDestroy&quot;">​</a></h3><p>在 Vue 实例销毁之前被调用，在此时我们的实例还未被销毁。</p><blockquote><p>在此时可以做一些操作，比如销毁定时器，解绑全局事件，销毁插件对象等</p></blockquote><h2 id="父子组件的生命周期" tabindex="-1">父子组件的生命周期 <a class="header-anchor" href="#父子组件的生命周期" aria-label="Permalink to &quot;父子组件的生命周期&quot;">​</a></h2><p>在父组件挂载前阶段，子组件已经挂载完成了。</p><p>不光是挂载阶段，其他两个阶段我们也可以打印出来，但是在这里我就不细说了，直接上结论：</p><ul><li>挂载阶段：父组件 beforeMount -&gt; 子组件 created -&gt; 子组件 mounted -&gt; 父组件 mounted</li><li>更新阶段：父组件 beforeUpdate -&gt; 子组件 beforeUpdate -&gt; 子组件 updated -&gt; 父组件 updated</li><li>销毁阶段：父组件 beforeDestroy -&gt; 子组件 beforeDestroy -&gt; 子组件 destroyed -&gt; 父组件 destroyed</li></ul><h3 id="请求放在哪个生命周期会更合适" tabindex="-1">请求放在哪个生命周期会更合适 <a class="header-anchor" href="#请求放在哪个生命周期会更合适" aria-label="Permalink to &quot;请求放在哪个生命周期会更合适&quot;">​</a></h3><ul><li>created</li><li>mounted</li></ul><p>上文已经讲了，这两个回答，前者是数据已经准备好了，后者是连 dom 也已经加载完成了，两个都是可以的，但是 mounted 会更好。</p><blockquote><p>以上为作者观点。Vue3 后我们的请求其实都在放到 setup 中的，这一阶段其实是 created。当然答案没有对错，欢迎批评、讨论和补充。</p></blockquote><h2 id="vue3-生命周期图" tabindex="-1">Vue3 生命周期图 <a class="header-anchor" href="#vue3-生命周期图" aria-label="Permalink to &quot;Vue3 生命周期图&quot;">​</a></h2>',33),p=e(`<h2 id="组合式-api-生命周期钩子" tabindex="-1">组合式 API：生命周期钩子 <a class="header-anchor" href="#组合式-api-生命周期钩子" aria-label="Permalink to &quot;组合式 API：生命周期钩子&quot;">​</a></h2><h3 id="onbeforemount" tabindex="-1">onBeforeMount <a class="header-anchor" href="#onbeforemount" aria-label="Permalink to &quot;onBeforeMount&quot;">​</a></h3><p>在组件被挂载之前被调用。</p><p>当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程。</p><h3 id="onmounted" tabindex="-1">onMounted <a class="header-anchor" href="#onmounted" aria-label="Permalink to &quot;onMounted&quot;">​</a></h3><p>在组件挂载完成后执行。</p><p>组件在以下情况下被视为已挂载：</p><ul><li><p>其所有同步子组件都已经被挂载 (不包含异步组件或 <code>&lt;Suspense&gt;</code> 树内的组件)。</p></li><li><p>其自身的 DOM 树已经创建完成并插入了父容器中。注意仅当根容器在文档中时，才可以保证组件 DOM 树也在文档中。</p></li></ul><h3 id="onbeforeupdate" tabindex="-1">onBeforeUpdate <a class="header-anchor" href="#onbeforeupdate" aria-label="Permalink to &quot;onBeforeUpdate&quot;">​</a></h3><p>在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</p><p>这个钩子可以用来在 Vue 更新 DOM 之前访问 DOM 状态。在这个钩子中更改状态也是安全的。</p><h3 id="onupdated" tabindex="-1">onUpdated <a class="header-anchor" href="#onupdated" aria-label="Permalink to &quot;onUpdated&quot;">​</a></h3><p>在组件因为响应式状态变更而更新其 DOM 树之后调用。父组件的更新钩子将在其子组件的更新钩子之后调用。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><ul><li>若需要在某个特定的状态更改后访问更新后的 DOM，请使用 nextTick() 作为替代</li><li>不要在 updated 钩子中更改组件的状态，这可能会导致无限的更新循环！</li></ul></div><h3 id="onactivated" tabindex="-1">onActivated <a class="header-anchor" href="#onactivated" aria-label="Permalink to &quot;onActivated&quot;">​</a></h3><p>注册一个回调函数，若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件被插入到 DOM 中时调用。</p><h3 id="ondeactivated" tabindex="-1">onDeactivated <a class="header-anchor" href="#ondeactivated" aria-label="Permalink to &quot;onDeactivated&quot;">​</a></h3><p>注册一个回调函数，若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件从 DOM 中被移除时调用。</p><h3 id="onbeforeunmount" tabindex="-1">onBeforeUnmount <a class="header-anchor" href="#onbeforeunmount" aria-label="Permalink to &quot;onBeforeUnmount&quot;">​</a></h3><p>在组件实例被卸载之前调用。</p><p>当这个钩子被调用时，组件实例依然还保有全部的功能。</p><h3 id="onunmounted" tabindex="-1">onUnmounted <a class="header-anchor" href="#onunmounted" aria-label="Permalink to &quot;onUnmounted&quot;">​</a></h3><p>在组件实例被卸载之后调用。</p><p>一个组件在以下情况下被视为已卸载：</p><ul><li><p>其所有子组件都已经被卸载。</p></li><li><p>所有相关的响应式作用 (渲染作用以及 setup() 时创建的计算属性和侦听器) 都已经停止。</p></li></ul><blockquote><p>可以在这个钩子中手动清理一些副作用，例如计时器、DOM 事件监听器或者与服务器的连接。</p></blockquote><h3 id="onerrorcaptured" tabindex="-1">onErrorCaptured <a class="header-anchor" href="#onerrorcaptured" aria-label="Permalink to &quot;onErrorCaptured&quot;">​</a></h3><p>在捕获了后代组件传递的错误时调用。</p><p>错误可以从以下几个来源中捕获：</p><ul><li>组件渲染</li><li>事件处理器</li><li>生命周期钩子</li><li>setup() 函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡钩子</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onErrorCaptured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorCapturedHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorCapturedHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentPublicInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可以在 errorCaptured() 中更改组件状态来为用户显示一个错误状态。注意不要让错误状态再次渲染导致本次错误的内容，否则组件会陷入无限循环。</p><p>这个钩子可以通过返回 false 来阻止错误继续向上传递</p><h4 id="错误传递规则" tabindex="-1">错误传递规则 <a class="header-anchor" href="#错误传递规则" aria-label="Permalink to &quot;错误传递规则&quot;">​</a></h4><ul><li><p>默认情况下，所有的错误都会被发送到应用级的 app.config.errorHandler (前提是这个函数已经定义)，这样这些错误都能在一个统一的地方报告给分析服务。</p></li><li><p>如果组件的继承链或组件链上存在多个 errorCaptured 钩子，对于同一个错误，这些钩子会被按从底至上的顺序一一调用。这个过程被称为“向上传递”，类似于原生 DOM 事件的冒泡机制。</p></li><li><p>如果 errorCaptured 钩子本身抛出了一个错误，那么这个错误和原来捕获到的错误都将被发送到 app.config.errorHandler。</p></li><li><p>errorCaptured 钩子可以通过返回 false 来阻止错误继续向上传递。即表示“这个错误已经被处理了，应当被忽略”，它将阻止其他的 errorCaptured 钩子或 app.config.errorHandler 因这个错误而被调用。</p></li></ul><h2 id="自测" tabindex="-1">自测 <a class="header-anchor" href="#自测" aria-label="Permalink to &quot;自测&quot;">​</a></h2><p><a href="./../../面试官问/07vue/q_vue_2-lifecycle.html">面试官问 - Vue 生命周期</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noreferrer">Vuejs 官方文档 - 组合式 API：生命周期钩子</a></li><li><a href="https://juejin.cn/post/7032881219524100132?searchId=20240220114253D90DBE51C91D49740FAF" target="_blank" rel="noreferrer">详解 Vue 的生命周期</a></li></ul>`,39);function h(u,c,k,b,m,f){const a=o("Image");return s(),l("div",null,[n,i(a,{src:"/07vue/lifecycle.webp",alt:"Vue2组件生命周期详解"}),d,i(a,{src:"/07vue/lifecycle.png",alt:"Vue3组件生命周期详解"}),p])}const _=t(r,[["render",h]]);export{g as __pageData,_ as default};
