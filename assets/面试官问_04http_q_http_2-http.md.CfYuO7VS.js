import{_ as t,c as e,o as l,V as a}from"./chunks/framework.CMKosmpS.js";const T=JSON.parse('{"title":"HTTP","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/04http/q_http_2-http.md","filePath":"面试官问/04http/q_http_2-http.md","lastUpdated":1709113218000}'),i={name:"面试官问/04http/q_http_2-http.md"},o=a('<h1 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h1><h2 id="http-headers" tabindex="-1">HTTP Headers <a class="header-anchor" href="#http-headers" aria-label="Permalink to &quot;HTTP Headers&quot;">​</a></h2><h3 id="请说一下-http-常用的状态码" tabindex="-1">请说一下 HTTP 常用的状态码 <a class="header-anchor" href="#请说一下-http-常用的状态码" aria-label="Permalink to &quot;请说一下 HTTP 常用的状态码&quot;">​</a></h3><details class="details custom-block"><summary>查看提示</summary><ul><li>1XX 信息响应，如 100 继续响应</li><li>2XX 请求成功 <ul><li>200 成功</li><li>204 成功但没拿到内容</li></ul></li><li>3XX 重定向 <ul><li>301 永久重定向</li><li>302 临时重定向</li><li>304 从缓存拿</li></ul></li><li>4XX 客户端错误 <ul><li>400 坏请求</li><li>401 客户端未验证</li><li>403 无权限</li><li>404 未找到</li><li>405 方法未被许可</li></ul></li><li>5XX 服务端错误 <ul><li>500 服务器错误 :::</li></ul></li></ul><h3 id="请说一下-http-常见请求头" tabindex="-1">请说一下 HTTP 常见请求头 <a class="header-anchor" href="#请说一下-http-常见请求头" aria-label="Permalink to &quot;请说一下 HTTP 常见请求头&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><code>Accept</code> 浏览器能够处理的内容类型</li><li><code>Accept-Charset</code> 浏览器能够显示的字符集</li><li><code>Accept-Encoding</code> 浏览器能够处理的压缩编码</li><li><code>Accept-Language</code> 浏览器当前设置的语言</li><li><code>Connection</code> 浏览器与服务器之间连接的类型</li><li><code>Cookie</code> 当前页面设置的任何 Cookie</li><li><code>Host</code> 发出请求的页面所在的域</li><li><code>Referer</code> 发出请求的页面的 URL</li><li><code>User-Agent</code> 浏览器的用户代理字符串</li></ul></details></details><h3 id="请说一下-http-常见响应头" tabindex="-1">请说一下 HTTP 常见响应头 <a class="header-anchor" href="#请说一下-http-常见响应头" aria-label="Permalink to &quot;请说一下 HTTP 常见响应头&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><code>Date</code> 表示消息发送的时间，时间的描述格式由 rfc822 定义</li><li><code>server</code> 服务器名称</li><li><code>Connection</code> 浏览器与服务器之间连接的类型</li><li><code>Cache-Control</code> 控制 HTTP 缓存</li></ul></details><h3 id="常见-content-type-类型有哪些" tabindex="-1">常见 Content-Type 类型有哪些 <a class="header-anchor" href="#常见-content-type-类型有哪些" aria-label="Permalink to &quot;常见 Content-Type 类型有哪些&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><code>application/x-www-form-urlencoded</code>：用于 URL 编码的表单数据，数据以键值对的形式发送。</li><li><code>multipart/form-data</code>：用于发送带有文件上传的表单数据，可以包含文本字段和文件字段。</li><li><code>application/json</code>：用于发送 JSON 格式的数据。</li><li><code>text/plain</code>：用于发送纯文本数据。</li><li><code>application/xml</code>：用于发送 XML 格式的数据。</li><li><code>text/xml</code>：用于发送 XML 格式的数据，与 application/xml 类似，但将数据视为纯文本。</li><li><code>application/octet-stream</code> 用于发送任意的二进制数据</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p><code>Content-Type</code> 用于指定请求中的主体数据的类型。根据你要发送的数据类型，选择合适的 <code>Content-Type</code>。在 <code>Fetch API</code> 中，你可以通过设置请求头部中的 <code>Content-Type</code> 字段来指定 <code>Content-Type</code></p></div></details><h2 id="restful-api" tabindex="-1">Restful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;Restful API&quot;">​</a></h2><h3 id="说下对-restful-api-的理解" tabindex="-1">说下对 Restful API 的理解 <a class="header-anchor" href="#说下对-restful-api-的理解" aria-label="Permalink to &quot;说下对 Restful API 的理解&quot;">​</a></h3><details class="details custom-block"><summary>查看提示</summary><ul><li>一种 API 的设计方法（约定）</li><li>传统 API 把每个 URL 当做一个功能</li><li>而 Restful API 设计 把每个 URL 当做一个唯一的资源</li></ul></details><h3 id="get-和-post-请求的区别" tabindex="-1">GET 和 POST 请求的区别 <a class="header-anchor" href="#get-和-post-请求的区别" aria-label="Permalink to &quot;GET 和 POST 请求的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特性</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>应用场景</td><td>幂等，请求资源、数据；</td><td>非幂等，请求接口可能有影响操作</td></tr><tr><td>是否缓存</td><td>可能缓存，会被放到浏览器历史记录中</td><td>不缓存</td></tr><tr><td>报文格式</td><td>请求报文中实体为空</td><td>请求报文中实体一般为向服务器发送的数据</td></tr><tr><td>安全性</td><td>可将参数（明文）暴露在 url 中</td><td>放到请求体中，相对安全</td></tr><tr><td>请求长度</td><td>浏览器对 URL 长度限制</td><td>请求体限制由浏览器定，比 GET 大得多</td></tr><tr><td>参数类型</td><td>单一</td><td>参数传递支持更多的数据类型</td></tr></tbody></table></details><h3 id="put-和-post-请求的区别" tabindex="-1">PUT 和 POST 请求的区别 <a class="header-anchor" href="#put-和-post-请求的区别" aria-label="Permalink to &quot;PUT 和 POST 请求的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>PUT 请求向浏览器发送数据，从而修改数据内容，但是<code>不会增加数据的种类</code>等（可理解为实时更新数据）</p></li><li><p>POST 请求向服务端发送数据，该请求<code>会改变数据的种类等资源</code>，它会创建新的内容（可理解为创建数据）</p></li></ul></details><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p><a href="./../../直击概念/04http/s_http_2-http_status_code.html">http status code</a></p>',17),d=[o];function c(s,r,h,u,n,p){return l(),e("div",null,d)}const P=t(i,[["render",c]]);export{T as __pageData,P as default};
