import{_ as t,c as a,o as e,V as l}from"./chunks/framework.i1kO8Tor.js";const m=JSON.parse('{"title":"HTTP缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/04http/q_http_3-cache.md","filePath":"面试官问/04http/q_http_3-cache.md","lastUpdated":1708674619000}'),i={name:"面试官问/04http/q_http_3-cache.md"},c=l('<h1 id="http缓存机制" tabindex="-1">HTTP缓存机制 <a class="header-anchor" href="#http缓存机制" aria-label="Permalink to &quot;HTTP缓存机制&quot;">​</a></h1><h2 id="浏览器有几种刷新方式-它们有什么区别" tabindex="-1">浏览器有几种刷新方式，它们有什么区别？ <a class="header-anchor" href="#浏览器有几种刷新方式-它们有什么区别" aria-label="Permalink to &quot;浏览器有几种刷新方式，它们有什么区别？&quot;">​</a></h2><details class="details custom-block"><summary>有以下几种：</summary><p>有以下3种刷新方式：</p><ul><li>地址栏<code>输入url</code>，通过链接跳转（前进后退等操作同）</li><li>手动刷新：按 <code>F5</code> 刷新，<code>右键点击刷新</code></li><li>强制刷新：按 <code>ctrl + F5</code></li></ul></details><details class="details custom-block"><summary>它们的区别是：</summary><ul><li>正常操作时（上述方式1），强制缓存有效，协商缓存也生效</li><li>手动刷新时：强制缓存失效，协商缓存有效</li><li>强制刷新时：强制缓存失效，协商缓存失效 (<code>缓存都失效</code>)</li></ul></details><h2 id="说一下浏览器缓存策略" tabindex="-1">说一下浏览器缓存策略 <a class="header-anchor" href="#说一下浏览器缓存策略" aria-label="Permalink to &quot;说一下浏览器缓存策略&quot;">​</a></h2><details class="details custom-block"><summary>分为：</summary><ul><li>强缓存：命中后浏览器不走服务器，直接读取本地的缓存资源，更快读取。 <ul><li>Cache-Control</li><li>Expires</li></ul></li><li>协商缓存：会通知服务器若命中，浏览器返304通知浏览器使用本地缓存资源，更快读取 <ul><li>ETag / If-None-Match</li><li>Last-Modified / If-Modified-Since</li></ul></li></ul></details><h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><ul><li><p><a href="./../../直击概念/04http/s_http_1-http.html">http</a></p></li><li><p><a href="./../../直击概念/04http/s_http_4-cache.html">http缓存</a></p></li></ul>',8),o=[c];function s(h,r,d,_,p,u){return e(),a("div",null,o)}const f=t(i,[["render",s]]);export{m as __pageData,f as default};
