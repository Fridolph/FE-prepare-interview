import{_ as e,c as a,o as l,V as i}from"./chunks/framework.cwIXGwyx.js";const b=JSON.parse('{"title":"项目梳理","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/00me/2难点梳理.md","filePath":"面试官问/00me/2难点梳理.md","lastUpdated":null}'),t={name:"面试官问/00me/2难点梳理.md"},r=i('<h1 id="项目梳理" tabindex="-1">项目梳理 <a class="header-anchor" href="#项目梳理" aria-label="Permalink to &quot;项目梳理&quot;">​</a></h1><h2 id="edr-终端侦测与响应系统" tabindex="-1">EDR 终端侦测与响应系统 <a class="header-anchor" href="#edr-终端侦测与响应系统" aria-label="Permalink to &quot;EDR 终端侦测与响应系统&quot;">​</a></h2><h3 id="简介和功能" tabindex="-1">简介和功能 <a class="header-anchor" href="#简介和功能" aria-label="Permalink to &quot;简介和功能&quot;">​</a></h3><p>综合系统，服务于甲方政企单位。通过探针实时监控用户终端的进程和文件，并实时上报汇总到服务端，统一在 Web 端进行展示和相关操作，实现了恶意代码预警和预测，极大地提高了客户的安全级别。我作为前端负责人，主要负责项目 Web 前端部分的开发和维护工作。</p><h3 id="基本流程" tabindex="-1">基本流程 <a class="header-anchor" href="#基本流程" aria-label="Permalink to &quot;基本流程&quot;">​</a></h3><ol><li>各个电脑安装一个客户端</li><li>客户端检测安全信息发送到统一的服务端</li><li>平台的前端综合展示信息</li></ol><h3 id="前端的技术栈" tabindex="-1">前端的技术栈： <a class="header-anchor" href="#前端的技术栈" aria-label="Permalink to &quot;前端的技术栈：&quot;">​</a></h3><ul><li>Vue2 + vue-router + vuex + vue-i18n</li><li>UI：iView</li><li>解决方案：vxe-table、axios、</li><li>Echarts + D3.js</li></ul><h2 id="项目难点" tabindex="-1">项目难点 <a class="header-anchor" href="#项目难点" aria-label="Permalink to &quot;项目难点&quot;">​</a></h2><h3 id="_1、使用-webworker-解决渲染卡顿问题" tabindex="-1">1、使用 webworker 解决渲染卡顿问题 <a class="header-anchor" href="#_1、使用-webworker-解决渲染卡顿问题" aria-label="Permalink to &quot;1、使用 webworker 解决渲染卡顿问题&quot;">​</a></h3><ul><li><p>背景</p><p>客户端检测到很多告警信息，汇总为表格，在前端展示。vxe-table 封装了很多功能(如 abc)，比.较符合这个复杂的应用场景(类型多，信息量大)，如果用 ElementUl table 需要从 0 自己封装</p></li><li><p>现象</p><p>导致渲染卡顿，原因就是信息量比较大、数据结构也比较复杂(如嵌套层级比较多) 计算量大</p></li><li><p>解决</p><p>开启 webworker 进行并发计算，开辟新线程进行（嵌套结构拍平，读取，数据过滤，字符串拼接等）计算，减少主线程的阻塞。</p></li><li><p>结果</p><p>不卡顿，最多可加载 xxx 条数据</p></li></ul><p>【补充】除了以上性能优化的难点之外，vxe-table 还有很多比较复杂的一些操作，例如</p><ul><li>二级表格、三级表格</li><li>提供虚拟滚动</li><li>搜索项较多 10 多个</li><li>数据联动</li><li>其他复杂操作：编辑、排序等</li></ul><h3 id="_2、报表绘制" tabindex="-1">2、报表绘制 <a class="header-anchor" href="#_2、报表绘制" aria-label="Permalink to &quot;2、报表绘制&quot;">​</a></h3><p>实现 html、pdf</p><h3 id="_3、终端详情-websocket-通信-excel-实时导出功能" tabindex="-1">3、终端详情 websocket 通信；excel 实时导出功能 <a class="header-anchor" href="#_3、终端详情-websocket-通信-excel-实时导出功能" aria-label="Permalink to &quot;3、终端详情 websocket 通信；excel 实时导出功能&quot;">​</a></h3><ul><li>背景</li></ul><p>终端信息（类似于任务管理器里的选项，及信息读取）</p><p>大量数据、列表及图形展示，会请求量很大</p><ul><li>解决方案</li></ul><p>使用 websocket 通信，实时推送数据，减少请求次数，减少数据传输量</p>',21),o=[r];function h(c,n,s,d,p,u){return l(),a("div",null,o)}const x=e(t,[["render",h]]);export{b as __pageData,x as default};
