import{_ as r,E as t,c as o,J as l,m as a,a as i,V as s,o as n}from"./chunks/framework.cwIXGwyx.js";const k=JSON.parse('{"title":"数组 Array","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/s_algo_4-array.md","filePath":"直击概念/03algo/s_algo_4-array.md","lastUpdated":1708674619000}'),c={name:"直击概念/03algo/s_algo_4-array.md"},h=a("h1",{id:"数组-array",tabindex:"-1"},[i("数组 Array "),a("a",{class:"header-anchor",href:"#数组-array","aria-label":'Permalink to "数组 Array"'},"​")],-1),d=a("p",null,"一种线性表数据结构。它使用一组连续的内存空间，来存储一组具有相同类型的数据。",-1),_=a("p",null,"简单来说，「数组」 是实现线性表的顺序结构存储的基础。",-1),p=a("p",null,"以整数数组为例，数组的存储方式如下图所示。",-1),u=s('<p>我们还可以从两个方面来解释一下数组的定义。</p><ul><li><p><strong>线性表：</strong> 线性表就是所有数据元素排成像一条线一样的结构，线性表上的数据元素都是相同类型，且每个数据元素最多只有前、后两个方向。数组就是一种线性表结构，此外，栈、队列、链表都是线性表结构。</p></li><li><p><strong>连续的内存空间：</strong> 线性表有两种存储结构：「顺序存储结构」和「链式存储结构」。其中，「顺序存储结构」是指占用的内存空间是连续的，相邻数据元素之间，物理内存上的存储位置也相邻。数组也是采用了顺序存储结构，并且存储的数据都是相同类型的。</p></li></ul><h2 id="数组基本操作-javascript" tabindex="-1">数组基本操作（JavaScript） <a class="header-anchor" href="#数组基本操作-javascript" aria-label="Permalink to &quot;数组基本操作（JavaScript）&quot;">​</a></h2><h3 id="访问元素" tabindex="-1">访问元素 <a class="header-anchor" href="#访问元素" aria-label="Permalink to &quot;访问元素&quot;">​</a></h3><p>「访问数组元素」的操作不依赖于数组中元素个数，因此，「访问数组元素」的时间复杂度为 O(n)。</p><h3 id="插入元素" tabindex="-1">插入元素 <a class="header-anchor" href="#插入元素" aria-label="Permalink to &quot;插入元素&quot;">​</a></h3><ul><li>push</li><li>shift</li></ul><h3 id="改变元素" tabindex="-1">改变元素 <a class="header-anchor" href="#改变元素" aria-label="Permalink to &quot;改变元素&quot;">​</a></h3><ul><li>splice</li></ul><h3 id="删除元素" tabindex="-1">删除元素 <a class="header-anchor" href="#删除元素" aria-label="Permalink to &quot;删除元素&quot;">​</a></h3><ul><li>pop</li><li>unshift</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>数组是最基础、最简单的数据结构。数组是实现线性表的顺序结构存储的基础。它使用一组连续的内存空间，来存储一组具有相同类型的数据。</p><p>数组的最大特点的支持随机访问。访问数组元素、改变数组元素的时间复杂度为 <code>O(1)</code>，在数组尾部插入、删除元素的时间复杂度也是 <code>O(1)</code>，普通情况下插入、删除元素的时间复杂度为 <code>O(n)</code>。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://algo.itcharge.cn/01.Array/01.Array-Basic/01.Array-Basic/" target="_blank" rel="noreferrer">算法通关手册 - 数组</a></li></ul>',16);function m(f,g,b,q,y,x){const e=t("Image");return n(),o("div",null,[h,d,_,p,l(e,{src:"/03algo/array.png"}),u])}const A=r(c,[["render",m]]);export{k as __pageData,A as default};
