import{_ as t,c as e,o as d,V as o}from"./chunks/framework.cwIXGwyx.js";const b=JSON.parse('{"title":"Vue 生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/07vue/q_vue_2-lifecycle.md","filePath":"面试官问/07vue/q_vue_2-lifecycle.md","lastUpdated":1708674619000}'),r={name:"面试官问/07vue/q_vue_2-lifecycle.md"},a=o('<h1 id="vue-生命周期" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;Vue 生命周期&quot;">​</a></h1><p><a href="./../../直击概念/07vue/s_vue_2-lifecycle.html">Vue 生命周期详解</a></p><h2 id="请说下-vue-的生命周期" tabindex="-1">请说下 Vue 的生命周期 <a class="header-anchor" href="#请说下-vue-的生命周期" aria-label="Permalink to &quot;请说下 Vue 的生命周期&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><table><thead><tr><th>生命周期钩子</th><th>相关说明</th></tr></thead><tbody><tr><td><strong>beforeCreate</strong></td><td>在<code>实例初始化之后</code>，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</td></tr><tr><td><strong>created</strong></td><td>在<code>实例创建完成之后</code>被调用。此时，组件已经完成了数据观测、属性和方法的运算，但是尚未挂载到 DOM 上</td></tr><tr><td><strong>beforeMount</strong></td><td>在组件<code>挂载到 DOM 之前</code>被调用</td></tr><tr><td><strong>mounted</strong></td><td>在组件<code>挂载到 DOM 后</code>被调用。此时，组件已经被渲染 到页面上。</td></tr><tr><td><strong>beforeUpdate</strong></td><td>在<code>组件更新之前</code>，即有新的虚拟 DOM 被重新渲染之前调用。</td></tr><tr><td><strong>updated</strong></td><td>在<code>组件更新完毕之后</code>被调用。此时，组件已经使用新的虚拟 DOM 重新渲染页面。</td></tr><tr><td><strong>beforeDestroy</strong></td><td>在<code>实例销毁之前</code>调用。此时，实例仍然可用。</td></tr><tr><td><strong>destroyed</strong></td><td>在<code>实例销毁之后</code>调用。此时，所有的事件监听器和子组件都已被移除。</td></tr></tbody></table><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><table><thead><tr><th>生命周期钩子</th><th>相关说明</th></tr></thead><tbody><tr><td><code>setup</code></td><td>在<strong>组件创建之前</strong>调用，用于设置组件的逻辑。这个函数接收两个参数：props 和 context</td></tr><tr><td><code>onBeforeMount</code></td><td>在组件<strong>挂载到 DOM 之前</strong>调用</td></tr><tr><td><code>onMounted</code></td><td>在<strong>组件挂载到 DOM 后</strong>调用。</td></tr><tr><td><code>onBeforeUpdate</code></td><td>在<strong>组件更新之前</strong>，即有新的虚拟 DOM 被重新渲染之前调用</td></tr><tr><td><code>onUpdated</code></td><td>在<strong>组件更新完毕之后</strong>调用</td></tr><tr><td><code>onBeforeUnmount</code></td><td>在<strong>组件卸载之前</strong>调用</td></tr><tr><td><code>onUnmounted</code></td><td>在<strong>组件卸载之后</strong>调用</td></tr><tr><td><code>onActivated</code></td><td>被 keep-alive 缓存的组件<code>激活</code>时调用。</td></tr><tr><td><code>onDeactivated</code></td><td>被 keep-alive 缓存的组件<code>停用</code>时调用。</td></tr><tr><td><code>onErrorCaptured</code></td><td>当捕获一个来自<code>子孙组件的错误时</code>被调用。</td></tr></tbody></table></details><h2 id="对生命周期的理解" tabindex="-1">对生命周期的理解 <a class="header-anchor" href="#对生命周期的理解" aria-label="Permalink to &quot;对生命周期的理解&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><ul><li>定义：<strong>生命周期就是一个 vue 实例从创建到销毁的过程</strong></li><li>作用：让我们可以在生命周期的<code>特定阶段</code>进行相关业务代码的编写</li><li>阶段：它可以总共分为 8 个阶段： <ul><li>创建前/后 beforeCreate / created (Vue3 setup)</li><li>载入前/后 beforeMount / mounted</li><li>更新前/后 beforeUpdate / updated</li><li>销毁前/后 beforeDestroy / destroyed</li></ul></li></ul></details><h2 id="第一次页面加载会触发哪几个钩子" tabindex="-1">第一次页面加载会触发哪几个钩子 <a class="header-anchor" href="#第一次页面加载会触发哪几个钩子" aria-label="Permalink to &quot;第一次页面加载会触发哪几个钩子&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>会触发 4 个钩子，分别是：</p><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li></ul></details><h2 id="dom-渲染在哪个生命周期完成" tabindex="-1">DOM 渲染在哪个生命周期完成 <a class="header-anchor" href="#dom-渲染在哪个生命周期完成" aria-label="Permalink to &quot;DOM 渲染在哪个生命周期完成&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>DOM 渲染是在 mounted 阶段完成，此阶段真实的 DOM 挂载完毕，数据完成双向绑定，可以访问到 DOM 节点。</p></details><h2 id="多组件-父子组件-中生命周期的调用顺序说一下" tabindex="-1">多组件（父子组件）中生命周期的调用顺序说一下 <a class="header-anchor" href="#多组件-父子组件-中生命周期的调用顺序说一下" aria-label="Permalink to &quot;多组件（父子组件）中生命周期的调用顺序说一下&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><ul><li><p>组件的调用顺序都是先父后子</p></li><li><p>渲染完成的顺序是先子后父</p></li><li><p>组件的销毁操作是先父后子</p></li><li><p>销毁完成的顺序是先子后父</p></li><li><p>加载渲染过程：父 beforeCreate-&gt;父 created-&gt;父 beforeMount-&gt;子 beforeCreate-&gt;子 created-&gt;子 beforeMount- &gt;子 mounted-&gt;父 mounted</p></li><li><p>子组件更新过程：父 beforeUpdate-&gt;子 beforeUpdate-&gt;子 updated-&gt;父 updated</p></li><li><p>父组件更新过程：父 beforeUpdate -&gt; 父 updated</p></li><li><p>销毁过程：父 beforeDestroy-&gt;子 beforeDestroy-&gt;子 destroyed-&gt;父 destroyed</p></li></ul></details><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7032881219524100132" target="_blank" rel="noreferrer">详解 Vue 的生命周期</a></li></ul>',14),l=[a];function s(c,i,n,u,h,p){return d(),e("div",null,l)}const g=t(r,[["render",s]]);export{b as __pageData,g as default};
