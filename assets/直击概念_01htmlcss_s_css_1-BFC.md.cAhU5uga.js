import{_ as a,c as l,o as e,V as i}from"./chunks/framework.cwIXGwyx.js";const m=JSON.parse('{"title":"BFC 块级格式化上下文","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/01htmlcss/s_css_1-BFC.md","filePath":"直击概念/01htmlcss/s_css_1-BFC.md","lastUpdated":1708674619000}'),o={name:"直击概念/01htmlcss/s_css_1-BFC.md"},t=i('<h1 id="bfc-块级格式化上下文" tabindex="-1">BFC 块级格式化上下文 <a class="header-anchor" href="#bfc-块级格式化上下文" aria-label="Permalink to &quot;BFC 块级格式化上下文&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>块级格式化上下文（Block Formatting Context，简称 BFC）。</p><ul><li><p>（MDN）它是 Web 页面的可视 CSS 渲染的一部分，是<code>块级盒子的布局过程发生的区域</code>，也是<code>浮动元素与其他元素交互的区域</code>。</p></li><li><p>（W3C）BFC 它决定了元素如何对其内容进行定位，以及与其它元素的关系和相互作用，当涉及到可视化布局时，Block Formatting Context 提供了一个环境，HTML 在这个环境中按照一定的规则进行布局。</p></li></ul><p>简单来说就是，BFC 是<code>一个完全独立的空间</code>（布局环境），<strong>让空间里的子元素不会影响到外面的布局</strong>。</p><h2 id="会创建块格式化上下文的方式" tabindex="-1">会创建块格式化上下文的方式 <a class="header-anchor" href="#会创建块格式化上下文的方式" aria-label="Permalink to &quot;会创建块格式化上下文的方式&quot;">​</a></h2><ul><li>文档的根元素（<code>&lt;html&gt;</code>）。</li><li>浮动元素（即 float 值不为 none 的元素）。</li><li>绝对定位元素（position 值为 absolute 或 fixed 的元素）。</li><li>行内块元素（display 值为 inline-block 的元素）。</li><li>表格单元格（display 值为 table-cell，HTML 表格单元格默认值）。</li><li>表格标题（display 值为 table-caption，HTML 表格标题默认值）。</li><li>匿名表格单元格元素（display 值为 table（HTML 表格默认值）、table-row（表格行默认值）、table-row-group（表格体默认值）、table-header-group（表格头部默认值）、table-footer-group（表格尾部默认值）或 inline-table）。</li><li>overflow 值不为 visible 或 clip 的块级元素。</li><li>display 值为 flow-root 的元素。</li><li>contain 值为 layout、content 或 paint 的元素。</li><li>弹性元素（display 值为 flex 或 inline-flex 元素的直接子元素），如果它们本身既不是弹性、网格也不是表格容器。</li><li>网格元素（display 值为 grid 或 inline-grid 元素的直接子元素），如果它们本身既不是弹性、网格也不是表格容器。</li><li>多列容器（column-count 或 column-width (en-US) 值不为 auto，且含有 column-count: 1 的元素）。</li><li>column-span 值为 all 的元素始终会创建一个新的格式化上下文，即使该元素没有包裹在一个多列容器中（规范变更、Chrome bug）</li></ul><h2 id="bfc-的规则" tabindex="-1">BFC 的规则 <a class="header-anchor" href="#bfc-的规则" aria-label="Permalink to &quot;BFC 的规则&quot;">​</a></h2><ul><li>BFC 就是一个块级元素，块级元素会在垂直方向一个接一个的排列</li><li>BFC 就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签</li><li>垂直方向的距离由 margin 决定， 属于同一个 BFC 的两个相邻的标签外边距会发生重叠</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ul><h2 id="bfc-解决了什么" tabindex="-1">BFC 解决了什么 <a class="header-anchor" href="#bfc-解决了什么" aria-label="Permalink to &quot;BFC 解决了什么&quot;">​</a></h2><p>通常，我们会为定位和清除浮动创建新的 BFC，而不是更改布局，因为它将<code>影响布局</code>。</p><ul><li>包含内部浮动。</li><li>排除外部浮动。</li><li>阻止外边距重叠。</li></ul><p><strong>包含内部浮动</strong></p><h3 id="_1-解决高度塌陷" tabindex="-1">1. 解决高度塌陷 <a class="header-anchor" href="#_1-解决高度塌陷" aria-label="Permalink to &quot;1. 解决高度塌陷&quot;">​</a></h3><blockquote><p>使用 float 布局时元素会脱离文档流，使得容器高度没有被撑开。</p></blockquote><p>为解决此问题可以给 container 触发 BFC，上面我们所说到的触发 BFC 属性都可以设置</p><h3 id="_2-解决-margin-边距重叠" tabindex="-1">2. 解决 margin 边距重叠 <a class="header-anchor" href="#_2-解决-margin-边距重叠" aria-label="Permalink to &quot;2. 解决 margin 边距重叠&quot;">​</a></h3><blockquote><p>区块的上下外边距有时会合并（折叠）为单个边距，其大小为两个边距中的最大值（或如果它们相等，则仅为其中一个），这种行为称为外边距折叠。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">注意</p><p>有设定浮动和绝对定位的元素不会发生外边距折叠。</p></div><h2 id="有三种情况会形成外边距折叠" tabindex="-1">有三种情况会形成外边距折叠 <a class="header-anchor" href="#有三种情况会形成外边距折叠" aria-label="Permalink to &quot;有三种情况会形成外边距折叠&quot;">​</a></h2><h3 id="_1-相邻的兄弟元素" tabindex="-1">1. 相邻的兄弟元素 <a class="header-anchor" href="#_1-相邻的兄弟元素" aria-label="Permalink to &quot;1. 相邻的兄弟元素&quot;">​</a></h3><p>相邻的同级元素之间的外边距会被折叠（除非后面的元素需要清除之前的浮动）。</p><h3 id="_2-没有内容将父元素和后代元素分开" tabindex="-1">2. 没有内容将父元素和后代元素分开 <a class="header-anchor" href="#_2-没有内容将父元素和后代元素分开" aria-label="Permalink to &quot;2. 没有内容将父元素和后代元素分开&quot;">​</a></h3><p>如果没有设定边框（border）、内边距（padding）、行级（inline）内容，也没有创建区块格式化上下文或间隙来分隔块级元素的上边距（margin-top）与其内一个或多个子代块级元素的上边距（margin-top）</p><p>或者没有设定边框、内边距、行级内容、高度（height）或最小高度（min-height）来分隔块级元素的下边距（margin-bottom）与其内部的一个或多个后代后代块元素的下边距（margin-bottom），则会出现这些外边距的折叠，重叠部分最终会溢出到父代元素的外面。</p><h3 id="_3-空的区块" tabindex="-1">3. 空的区块 <a class="header-anchor" href="#_3-空的区块" aria-label="Permalink to &quot;3. 空的区块&quot;">​</a></h3><p>如果块级元素没有设定边框、内边距、行级内容、高度（height）、最小高度（min-height）来分隔块级元素的上边距（margin-top）及其下边距（margin-bottom），则会出现其上下外边距的折叠。</p><div class="warning custom-block"><p class="custom-block-title">一些需要注意的地方：</p><ul><li>上述情况的组合会产生更复杂的（超过两个外边距的）外边距折叠。</li><li>即使某一外边距为 0，这些规则仍然适用。因此就算父元素的外边距是 0，第一个或最后一个子元素的外边距仍然会（根据上述规则）“溢出”到父元素的外面。</li><li>如果包含负边距，折叠后的外边距的值为最大的正边距与最小（绝对值最大）的负边距的和。</li><li>如果所有的外边距都为负值，折叠后的外边距的值为最小（绝对值最大）的负边距的值。这一规则适用于相邻元素和嵌套元素。</li><li>外边距折叠仅与垂直方向有关。</li><li>display 设置为 flex 或 grid 的容器中不会发生外边距折叠。</li></ul></div><p>因为<code>正常文档流</code>中建立的 BFC <code>不与</code>元素<code>本身所在的</code>块格式化上下文中的<code>任何浮动</code>的<code>外边距重叠</code></p><h2 id="自测" tabindex="-1">自测 <a class="header-anchor" href="#自测" aria-label="Permalink to &quot;自测&quot;">​</a></h2><p><a href="./../../面试官问/01htmlcss/q_css_1-base.html">面试官问：CSS 基础</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing" target="_blank" rel="noreferrer">掌握外边距折叠</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_display/Block_formatting_context" target="_blank" rel="noreferrer">区块格式化上下文</a></li><li><a href="https://juejin.cn/post/6950082193632788493" target="_blank" rel="noreferrer">面试官：请说说什么是 BFC？大白话讲清楚</a></li></ul>',33),r=[t];function n(c,s,d,h,p,u){return e(),l("div",null,r)}const _=a(o,[["render",n]]);export{m as __pageData,_ as default};
