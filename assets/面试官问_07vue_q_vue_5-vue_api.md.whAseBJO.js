import{_ as s,c as i,o as a,V as n}from"./chunks/framework.cwIXGwyx.js";const E=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/07vue/q_vue_5-vue_api.md","filePath":"面试官问/07vue/q_vue_5-vue_api.md","lastUpdated":1709101052000}'),e={name:"面试官问/07vue/q_vue_5-vue_api.md"},l=n(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><h2 id="对-nexttick-的理解" tabindex="-1">对 nextTick 的理解 <a class="header-anchor" href="#对-nexttick-的理解" aria-label="Permalink to &quot;对 nextTick 的理解&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>官方定义：在<strong>下次 DOM 更新循环结束之后执行延迟回调</strong>。在修改数据之后立即使用这个方法，<code>获取更新后的 DOM</code></p><p>个人理解：Vue 在<code>更新 DOM 时是异步</code>执行的。当数据发生变化，Vue 将开启一个<code>异步更新队列</code>，视图需要等队列中所有数据变化完成之后，再统一进行更新。</p><p>总结 nextTick 代码的流程：</p><ul><li>把回调函数放入 callbacks 等待执行</li><li>将执行函数放到微任务或者宏任务中</li><li>事件循环到了微任务或者宏任务，执行函数依次执行 callbacks 中的回调</li></ul></details><h2 id="什么是-mixin" tabindex="-1">什么是 mixin <a class="header-anchor" href="#什么是-mixin" aria-label="Permalink to &quot;什么是 mixin&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><ul><li>混入（mixin）提供了一种非常灵活的方式，来分发  Vue 组件中的<code>可复用功能</code></li><li>一个混入对象可以包含任意组件选项（data、methods、mounted 等）</li><li>当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项</li><li>当组件和混入对象含有同名选项时进行合并</li><li>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先</li></ul></details><h2 id="vue-set-的实现原理" tabindex="-1">Vue.set 的实现原理 <a class="header-anchor" href="#vue-set-的实现原理" aria-label="Permalink to &quot;Vue.set 的实现原理&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>Vue.set，调用方法： <code>Vue.set(target, key, value)</code></p><ul><li>给对应和数组本身都增加了 <code>dep</code> 属性</li><li>当给对象新增不存在的属性则 <strong>触发对象依赖的 watcher 去更新</strong></li><li>当修改数组索引时，我们调用数组本身的 splice 去更新数组（数组的响应式原理就是重写了 splice 等方法，调用 splice 就会触发视图更新）</li></ul><p>vm.$set 的实现原理</p><ul><li>如果目标是数组 ，直接使用数组的 splice 方法触发相应式；</li><li>如果目标是对象 ，会先判读属性是否存在，对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li></ul></details><h2 id="vue-extend-使用和原理" tabindex="-1">Vue.extend 使用和原理 <a class="header-anchor" href="#vue-extend-使用和原理" aria-label="Permalink to &quot;Vue.extend 使用和原理&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>Vue.extend 使用基础 Vue 构造器，创建一个子类。参数是一个包含组件选项的对象。</p><p>其实就是一个子类构造器，extend 是 Vue 组件的核心 api，实现思路就是<code>使用原型继承的方法返回了 Vue 的子类</code>，并且利用 <code>mergeOptions</code> 把传入组件的 options 和父类的 options 进行了合并。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initExtend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 组件的唯一标识</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 创建子类继承Vue父类，便于属性扩展</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">extendOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建子类的构造函数，并且调用初始化方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 调用Vue初始化方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Sub.cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 子类原型指向父类</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // constructor指向自己</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sub</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 合并自己的options 和 父类的 options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Sub.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.options, extendOptions)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sub</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></details><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>shallowRef()</li><li>triggerRef()</li><li>customRef()</li><li>shallowReactive()</li><li>shallowReadonly()</li><li>toRaw()</li><li>markRaw()</li><li>effectScope()</li><li>getCurrentScope()</li><li>onScopeDispose()</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7204844328111374391" target="_blank" rel="noreferrer">2023 前端 Vue 面试题及答案</a></li><li><a href="https://juejin.cn/post/7157552181582200863" target="_blank" rel="noreferrer">Vue2 源码解读 - 深入理解 this.$nextTick()</a></li><li><a href="https://juejin.cn/post/7275943802934149160" target="_blank" rel="noreferrer">2023 高频前端面试题合集之 Vue（下篇）</a></li><li><a href="https://cn.vuejs.org/guide/reusability/custom-directives.html" target="_blank" rel="noreferrer">Vue - 自定义指令</a></li></ul>`,13),t=[l];function p(h,k,r,d,c,o){return a(),i("div",null,t)}const g=s(e,[["render",p]]);export{E as __pageData,g as default};
