import{_ as s,c as i,o as a,V as l}from"./chunks/framework.CMKosmpS.js";const g=JSON.parse('{"title":"ESNext","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/02js/s_esnext_2-esnext.md","filePath":"直击概念/02js/s_esnext_2-esnext.md","lastUpdated":1723650126000}'),n={name:"直击概念/02js/s_esnext_2-esnext.md"},e=l(`<h1 id="esnext" tabindex="-1">ESNext <a class="header-anchor" href="#esnext" aria-label="Permalink to &quot;ESNext&quot;">​</a></h1><h2 id="es7-2016" tabindex="-1">ES7 - 2016 <a class="header-anchor" href="#es7-2016" aria-label="Permalink to &quot;ES7 - 2016&quot;">​</a></h2><ul><li>数组 includes()方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</li><li>a ** b 指数运算符，它与 Math.pow(a, b)相同。</li></ul><h2 id="es8-2017" tabindex="-1">ES8 - 2017 <a class="header-anchor" href="#es8-2017" aria-label="Permalink to &quot;ES8 - 2017&quot;">​</a></h2><ul><li><code>async/await</code></li><li>Object.values()</li><li>Object.entries()</li><li>String padding <code>padStart()</code> 和 <code>padEnd()</code>，填充字符串达到当前长度</li><li>函数参数列表结尾允许逗号</li><li>Object.getOwnPropertyDescriptors()</li><li>ShareArrayBuffer 和 Atomics 对象，用于从共享内存位置读取和写入</li></ul><h2 id="es9-2018" tabindex="-1">ES9 - 2018 <a class="header-anchor" href="#es9-2018" aria-label="Permalink to &quot;ES9 - 2018&quot;">​</a></h2><ul><li>异步迭代 <code>for of</code></li><li>Promise.finally()</li><li>Rest/Spread 属性</li><li>正则表达式命名捕获组（Regular Expression Named Capture Groups）</li><li>正则表达式反向断言（lookbehind）</li><li>正则表达式 dotAll 模式</li><li>正则表达式 Unicode 转义</li><li>非转义序列的模板字符串</li></ul><h2 id="es10-2019" tabindex="-1">ES10 - 2019 <a class="header-anchor" href="#es10-2019" aria-label="Permalink to &quot;ES10 - 2019&quot;">​</a></h2><ul><li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配</li><li>更加友好的 JSON.stringify</li><li>新增了 Array 的 <code>flat()</code> 方法和 <code>flatMap()</code> 方法</li><li>新增了 String 的 <code>trimStart()</code> 方法和 <code>trimEnd()</code> 方法</li><li>Object.fromEntries()</li><li>Symbol.prototype.description</li><li>String.prototype.matchAll</li><li>Function.prototype.toString()现在返回精确字符，包括空格和注释</li><li>简化 try {} catch {},修改 catch 绑定</li><li>新的基本数据类型 BigInt</li><li>globalThis</li><li>import()</li><li>Legacy RegEx</li><li>私有的实例方法和访问器</li></ul><h2 id="es11-2020" tabindex="-1">ES11 - 2020 <a class="header-anchor" href="#es11-2020" aria-label="Permalink to &quot;ES11 - 2020&quot;">​</a></h2><p>ES2020(ES11) 引入了以下新特性：</p><ul><li>String 的 matchAll 方法</li><li>动态导入语句 import()</li><li>import.meta</li><li><code>export * as ns from &#39;module&#39;</code></li><li>Promise.allSettled()</li><li>一种新的数据类型：BigInt</li><li>GlobalThis</li><li>Nullish coalescing Operator</li><li>Optional Chaining</li></ul><h2 id="es12-2021" tabindex="-1">ES12 - 2021 <a class="header-anchor" href="#es12-2021" aria-label="Permalink to &quot;ES12 - 2021&quot;">​</a></h2><ul><li>String.prototype.replaceAll</li><li>Promise.any &amp; AggregateError</li><li>逻辑赋值运算符 <code>??=</code> <code>&amp;&amp;=</code> <code>||=</code></li><li>WeakRef &amp; FinalizationRegistry（弱引用和垃圾回收监听）</li><li>Numeric literal separator（数字分隔符） <ul><li><code>1_000_000_000</code> // 1000000000</li></ul></li><li>Array.prototype.sort</li></ul><h2 id="es13-2022" tabindex="-1">ES13 - 2022 <a class="header-anchor" href="#es13-2022" aria-label="Permalink to &quot;ES13 - 2022&quot;">​</a></h2><ul><li><p>Class Fields</p><ul><li>Class Public Instance Fields 公共实例字段</li><li>Private Instance Fields 私有实例字段</li><li>Private instance methods and accessors 私有实例方法和访问器</li><li>Static class fields and methods 静态公共字段和方法</li><li>Private static class fields and methods 静态私有字段和方法</li></ul></li><li><p>Class Static Block 类静态初始化块</p></li><li><p>Ergonomic brand checks for Private Fields 私有字段检查</p></li><li><p>RegExp Match Indices</p></li><li><p>Top-level await</p></li><li><p><code>.at()</code></p></li><li><p>Error Cause</p></li><li><p>Accessible Object.prototype.hasOwnProperty</p></li></ul><h2 id="es14-2023" tabindex="-1">ES14 - 2023 <a class="header-anchor" href="#es14-2023" aria-label="Permalink to &quot;ES14 - 2023&quot;">​</a></h2><ul><li>Array.prototype.toSorted</li><li>Array.prototype.toReversed</li><li>Array.prototype.with</li><li>Array.prototype.findLast</li><li>Array.prototype.findLastIndex</li><li>Array.prototype.toSpliced</li><li>正式的 shebang 支持</li><li>Symbol 作为 WeakMap 的键</li></ul><h2 id="es15-2024" tabindex="-1">ES15 - 2024 <a class="header-anchor" href="#es15-2024" aria-label="Permalink to &quot;ES15 - 2024&quot;">​</a></h2><h3 id="_1-promise-withresolvers" tabindex="-1">1. Promise.withResolvers <a class="header-anchor" href="#_1-promise-withresolvers" aria-label="Permalink to &quot;1. Promise.withResolvers&quot;">​</a></h3><p>这个功能引入了一个新方法来创建一个 promise，直接返回 resolve 和 reject 的回调。使用 Promise.withResolvers ，我们可以创建直接在其执行函数之外 resolve 和 reject</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withResolvers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-object-groupby" tabindex="-1">2. Object.groupBy <a class="header-anchor" href="#_2-object-groupby" aria-label="Permalink to &quot;2. Object.groupBy&quot;">​</a></h3><p>Object.groupBy() 方法是一项新添加的功能，允许我们按照特定属性将数组中的 对象分组，从而使数据处理变得更加容易。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;女&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;王五&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pets, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pet.gender)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { 女: [ { gender: &#39;女&#39;, name: &#39;李四&#39; } ], 男: [ { gender: &#39;男&#39;, name: &#39;张三&#39; }, { gender: &#39;男&#39;, name: &#39;王五&#39; } ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-temporal" tabindex="-1">3. Temporal <a class="header-anchor" href="#_3-temporal" aria-label="Permalink to &quot;3. Temporal&quot;">​</a></h3><p>Temporal 提案引入了一个新的 API，以更直观和高效的方式 处理日期和时间。例如，Temporal API 提供了新的日期、时间和持续时间的数据类型，以及用于创建、操作和格式化这些值的函数。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> today</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Temporal.PlainDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ year: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, month: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, day: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(today.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 2024-2-15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Temporal.Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ hours: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minutes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tomorrow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tomorrow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 2024-2-16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-records-和-tuples" tabindex="-1">4. Records 和 Tuples <a class="header-anchor" href="#_4-records-和-tuples" aria-label="Permalink to &quot;4. Records 和 Tuples&quot;">​</a></h3><p>Records 和 Tuples 是全新的数据结构，提供了一种更简洁和类型安全的方式来创建对象和数组。</p><ul><li>Records 类似于对象，但具有具体类型的固定属性集。</li><li>Tuples 类似于数组，但具有固定长度，每个元素可以具有不同类型。</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  year: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(record.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: JavaScript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-装饰器-decorators" tabindex="-1">5. 装饰器 Decorators <a class="header-anchor" href="#_5-装饰器-decorators" aria-label="Permalink to &quot;5. 装饰器 Decorators&quot;">​</a></h3><p>装饰器（Decorators）是一种提议的语法，用于添加元数据或修改类、函数或属性的行为。装饰器可用于实现各种功能，如日志记录、缓存和依赖注入。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">descriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> descriptor.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  descriptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Calling \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} with arguments:\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> original.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> descriptor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @logged</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：[1, 2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>ES15 还提供了很多其他的新提案，比如：新的正则 v、管道符|&gt;、String.prototype.isWellFormed()、ArrayBuffer.prototype.resize 等等</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903811622912014" target="_blank" rel="noreferrer">ES6、ES7、ES8、ES9、ES10 新特性一览</a>——上沅兮</li><li><a href="https://juejin.cn/post/6883306672064987149" target="_blank" rel="noreferrer">ES11 新增的这 9 个新特性，你都掌握了吗？</a>——无名之苝</li><li><a href="https://juejin.cn/post/7036574117033672712" target="_blank" rel="noreferrer">ES2021(ES12)新特性解读</a>——小吉很低调</li><li><a href="https://juejin.cn/post/7060329023569657892" target="_blank" rel="noreferrer">ES2022(ES13)新特性解读</a></li><li><a href="https://juejin.cn/post/7279719681444528163" target="_blank" rel="noreferrer">ES14 新特性揭秘，对前端开发有哪些影响？</a>——Bun</li><li><a href="https://juejin.cn/post/7349410765525483555?searchId=202408141131206491A32D71AB9B47C626" target="_blank" rel="noreferrer">ES2024 即将发布！5 个可能大火的 JS 新方法</a>——程序员 Sunday</li></ul>`,39),t=[e];function h(p,r,k,d,E,o){return a(),i("div",null,t)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
