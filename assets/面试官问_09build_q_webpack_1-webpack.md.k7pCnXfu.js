import{_ as s,c as i,o as a,V as l}from"./chunks/framework.i1kO8Tor.js";const b=JSON.parse('{"title":"Webpack","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/09build/q_webpack_1-webpack.md","filePath":"面试官问/09build/q_webpack_1-webpack.md","lastUpdated":1708674619000}'),e={name:"面试官问/09build/q_webpack_1-webpack.md"},n=l(`<h1 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h1><h2 id="webpack-是什么" tabindex="-1">Webpack 是什么 <a class="header-anchor" href="#webpack-是什么" aria-label="Permalink to &quot;Webpack 是什么&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><p>webpack 是一个模块打包器。webpack 的主要目标是将 JavaScript 文件打包在一起，打包后的文件用于在浏览器中使用，但它也能够胜任转换(transform)、打包(bundle)。</p></details><h2 id="说一下-webpack-的构建流程" tabindex="-1">说一下 webpack 的构建流程 <a class="header-anchor" href="#说一下-webpack-的构建流程" aria-label="Permalink to &quot;说一下 webpack 的构建流程&quot;">​</a></h2><details class="details custom-block"><summary>简单版：</summary><ul><li>初始化：启动<code>构建</code>，<code>读取与合并配置参数</code>，<code>加载 Plugin</code>，<code>实例化 Compiler</code></li><li>编译：从 <code>Entry</code> 出发，针对每个 Module 串行调用对应的 <code>Loader</code> 去翻译文件的内容，再找到该 <code>Module 依赖</code>的 Module，<code>递归地进行编译处理</code></li><li>输出：将编译后的 Module 组合成 <code>Chunk</code>，将 Chunk <code>转换成文件</code>，<code>输出到文件</code>系统中</li></ul></details><details class="details custom-block"><summary>Webpack 的运⾏流程是⼀个串⾏的过程，从启动到结束会<code>依次执⾏</code>以下流程：</summary><ol><li><strong>初始化参数</strong>：解析 webpack 配置参数，合并 shell 传入和 webpack.config.js 文件配置的参数，形成最后的配置结果。</li><li><strong>开始编译</strong>：上一步得到的参数初始化<code>compiler</code>对象，注册所有配置的插件，插件监听 webpack 构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。</li><li><strong>确定入口</strong>：从配置的<code>entry</code>入口，开始<code>解析文件</code>构建 AST 语法树，<code>找出依赖</code>，<code>递归</code>下去。</li><li><strong>编译模块</strong>：递归中根据<code>文件类型</code>和<code>loader配置</code>，调用所有配置的 loader 对<code>文件转换</code>，再找出该<code>模块依赖</code>的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li><strong>完成模块编译</strong>：在经过第 4 步使⽤ Loader 翻译完所有模块后，得到了每个模块被翻译后的<code>最终内容</code>以<code>及它们之间的依赖关系</code>；</li><li><strong>输出资源</strong>：根据⼊⼝和模块之间的依赖关系，组装成⼀个个包含多个模块的 <code>Chunk</code>，再把每个 Chunk 转换成⼀个单独的⽂件加⼊到输出列表，这步是可以修改输出内容的最后机会；</li><li><strong>输出完成</strong>：在确定好输出内容后，根据配置确定输出的路径和⽂件名，把⽂件内容<code>写⼊到⽂件</code>系统。</li></ol></details><h2 id="相关使用" tabindex="-1">相关使用 <a class="header-anchor" href="#相关使用" aria-label="Permalink to &quot;相关使用&quot;">​</a></h2><h3 id="有哪些常见-loader" tabindex="-1">有哪些常见 loader <a class="header-anchor" href="#有哪些常见-loader" aria-label="Permalink to &quot;有哪些常见 loader&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>raw-loader：加载文件原始内容（utf-8）</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li><li>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>svg-inline-loader：将压缩后的 SVG 内容注入代码中</li><li>image-loader：加载并且压缩图片文件</li><li>json-loader 加载 JSON 文件（默认包含）</li><li>babel-loader：把 ES6 转换成 ES5</li><li>ts-loader: 将 TypeScript 转换成 JavaScript</li><li>awesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li><li>sass-loader：将 SCSS/SASS 代码转换成 CSS</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li><li>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li><li>tslint-loader：通过 TSLint 检查 TypeScript 代码</li><li>coverjs-loader：计算测试的覆盖率</li><li>vue-loader：加载 Vue.js 单文件组件</li><li>i18n-loader: 国际化</li><li>cache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li></ul></details><h3 id="有哪些常见的-plugin" tabindex="-1">有哪些常见的 Plugin <a class="header-anchor" href="#有哪些常见的-plugin" aria-label="Permalink to &quot;有哪些常见的 Plugin&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>define-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li><li>ignore-plugin：忽略部分文件</li><li>html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)</li><li>web-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li><li><code>uglifyjs-webpack-plugin</code>：不支持 ES6 压缩 (Webpack4 以前)</li><li><code>terser-webpack-plugin</code>: 支持压缩 ES6 (Webpack4)</li><li><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</li><li><code>mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代 extract-text-webpack-plugin)</li><li>serviceworker-webpack-plugin：为网页应用增加离线缓存功能</li><li>clean-webpack-plugin: 目录清理</li><li><code>ModuleConcatenationPlugin</code>: 开启 Scope Hoisting</li><li>speed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li><li><code>webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li></ul></details><h3 id="说一说-loader-和-plugin-的区别" tabindex="-1">说一说 Loader 和 Plugin 的区别 <a class="header-anchor" href="#说一说-loader-和-plugin-的区别" aria-label="Permalink to &quot;说一说 Loader 和 Plugin 的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特性</th><th>Loader</th><th>Plugin</th></tr></thead><tbody><tr><td>从本质上</td><td>是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果</td><td>为插件，可扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果</td></tr><tr><td>从配置上</td><td>在 <code>module.rules</code> 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</td><td>在 <code>plugins</code> 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入</td></tr></tbody></table></details><h3 id="用过哪些可以提高效率的插件" tabindex="-1">用过哪些可以提高效率的插件 <a class="header-anchor" href="#用过哪些可以提高效率的插件" aria-label="Permalink to &quot;用过哪些可以提高效率的插件&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>webpack-dashboard：可以更友好的展示相关打包信息。</li><li>webpack-merge：提取公共配置，减少重复配置代码</li><li>speed-measure-webpack-plugin：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。</li><li>size-plugin：监控资源体积变化，尽早发现问题</li><li>HotModuleReplacementPlugin：模块热替换</li></ul></details><h3 id="简单描述一下编写-loader-的思路" tabindex="-1">简单描述一下编写 loader 的思路 <a class="header-anchor" href="#简单描述一下编写-loader-的思路" aria-label="Permalink to &quot;简单描述一下编写 loader 的思路&quot;">​</a></h3><blockquote><p>Loader 的 API 可以去官网查阅</p></blockquote><details class="details custom-block"><summary>详细信息</summary><p>Loader <code>支持链式调用</code>，所以开发上需要严格遵循<code>“单一职责”</code>，每个 Loader 只负责自己需要负责的事情。</p><ul><li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li><li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</li><li>尽可能的异步化 Loader，如果计算量很小，同步也可以</li><li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li><li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li><li>加载本地 Loader 方法 <ul><li>npm link</li><li>ResolveLoader :::</li></ul></li></ul><h3 id="简单描述一下编写-plugin-的思路" tabindex="-1">简单描述一下编写 Plugin 的思路 <a class="header-anchor" href="#简单描述一下编写-plugin-的思路" aria-label="Permalink to &quot;简单描述一下编写 Plugin 的思路&quot;">​</a></h3><blockquote><p>Plugin 的 API 可以去官网查阅</p></blockquote><details class="details custom-block"><summary>详细信息</summary><p><strong>webpack 在运行的生命周期中会广播出许多事件</strong>，Plugin 可以<code>监听这些事件</code>，在特定的阶段通过钩子添加自定义功能。Webpack 的 <code>Tapable 事件流机制</code>保证了插件的有序性，使得整个系统扩展性良好。</p><ul><li>compiler 暴露了和 Webpack 整个生命周期相关的钩子</li><li>compilation 暴露了与模块和依赖有关的粒度更小的事件钩子</li><li>插件需要在其原型上绑定 apply 方法，才能访问 compiler 实例</li><li>传给每个插件的 compiler 和 compilation 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件</li></ul><p>找出合适的事件点去完成想要的功能：</p><ul><li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)</li><li>watch-run 当依赖的文件发生变化时会触发</li><li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住</li></ul></details></details><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><h3 id="webpack-模块打包原理" tabindex="-1">Webpack 模块打包原理 <a class="header-anchor" href="#webpack-模块打包原理" aria-label="Permalink to &quot;Webpack 模块打包原理&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Webpack 实际上为每个模块创造了一个可以导出和导入的环境，<code>本质上并没有修改代码的执行逻辑</code>，代码<strong>执行顺序与模块加载顺序也完全一致</strong>。</p></details><h3 id="webpack-文件监听原理" tabindex="-1">Webpack 文件监听原理 <a class="header-anchor" href="#webpack-文件监听原理" aria-label="Permalink to &quot;Webpack 文件监听原理&quot;">​</a></h3><p>在发现源码发生变化时，自动重新构建出新的输出文件。Webpack 开启监听模式：</p><details class="details custom-block"><summary>有两种方式</summary><ul><li>启动 webpack 命令时，带上 <code>--watch</code> 参数</li><li>在配置 webpack.config.js 中设置 <code>watch:true</code></li></ul><p>缺点：每次需要手动刷新浏览器</p><p>原理：<code>轮询</code>判断文件的<code>最后编辑时间</code>是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先<code>缓存</code>起来，等 <code>aggregateTimeout</code> 后再执行。</p></details><h3 id="webpack-的热更新原理" tabindex="-1">Webpack 的热更新原理 <a class="header-anchor" href="#webpack-的热更新原理" aria-label="Permalink to &quot;Webpack 的热更新原理&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Webpack 的热更新又称热替换（Hot Module Replacement），缩写为 <code>HMR</code>。 这个机制可以做到<strong>不用刷新浏览器而将新变更的模块替换掉旧的模块</strong>。</p><p>HMR 的核心就是客户端从服务端拉取更新后的文件，准确的说是 <code>chunk diff</code> (chunk <code>需要更新的部分</code>)</p><ol><li>Webpack Dev Server 与浏览器之间维护了一个 <code>Websocket</code></li><li>当本地资源发生变化时，WDS 会<code>向浏览器推送更新</code>，并带上构建时的 hash，让客户端<code>与上一次资源进行对比</code></li><li>客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)</li><li>这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该 chunk 的增量更新。</li><li><code>后续的部分</code>(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？) <code>由 HotModulePlugin 来完成</code>，提供了相关 API 以供开发者针对自身场景进行处理，像 react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。</li></ol></details><h3 id="babel-原理" tabindex="-1">Babel 原理 <a class="header-anchor" href="#babel-原理" aria-label="Permalink to &quot;Babel 原理&quot;">​</a></h3><p>大多数 JavaScript Parser 遵循 estree 规范，Babel 最初基于 acorn 项目(轻量级现代 JavaScript 解析器) Babel 大概分为三大部分：</p><details class="details custom-block"><summary>详细信息</summary><ul><li>解析：将代码转换成 AST <ul><li>词法分析：将代码(字符串)分割为 token 流，即语法单元成的数组</li><li>语法分析：分析 token 流(上面生成的数组)并生成 AST</li></ul></li><li>转换：访问 AST 的节点进行变换操作生产新的 AST <ul><li>Taro 就是利用 babel 完成的小程序语法转换</li></ul></li><li>生成：以新的 AST 为基础生成代码</li></ul></details><h2 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h2><h3 id="如何利用-webpack-优化性能" tabindex="-1">如何利用 Webpack 优化性能 <a class="header-anchor" href="#如何利用-webpack-优化性能" aria-label="Permalink to &quot;如何利用 Webpack 优化性能&quot;">​</a></h3><p>就像能不能说一说「从 URL 输入到页面显示发生了什么」一样，同理优化 Vite 构建速度</p><h4 id="减少耗时-减少请求次数" tabindex="-1">减少耗时，减少请求次数 <a class="header-anchor" href="#减少耗时-减少请求次数" aria-label="Permalink to &quot;减少耗时，减少请求次数&quot;">​</a></h4><details class="details custom-block"><summary>详细信息</summary><ul><li>使用<code>高版本</code>的 Webpack 和 Node.js</li></ul><p><code>缩小打包作用域</code>，如：</p><ul><li>exclude/include (确定 loader 规则范围)</li><li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li><li>resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)</li><li>resolve.extensions 尽可能减少后缀尝试的可能性</li><li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li><li>IgnorePlugin (完全排除模块)</li><li>合理使用 alias</li></ul><p><code>充分利用缓存</code>：</p><ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin</li></ul></details><h4 id="资源压缩-减小代码体积" tabindex="-1">资源压缩，减小代码体积 <a class="header-anchor" href="#资源压缩-减小代码体积" aria-label="Permalink to &quot;资源压缩，减小代码体积&quot;">​</a></h4><details class="details custom-block"><summary>详细信息</summary><ul><li><code>压缩代码</code><ul><li>多进程并行压缩 <ol><li>webpack-paralle-uglify-plugin</li><li>uglifyjs-webpack-plugin 开启 parallel 参数 (不支持 ES6)</li><li>terser-webpack-plugin 开启 parallel 参数</li></ol></li><li>通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS</li></ul></li><li><code>图片压缩</code><ul><li>使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)</li><li>配置 image-webpack-loader</li></ul></li><li><code>提取页面公共资源</code><ul><li>使用 <code>html-webpack-externals-plugin</code>，将基础包通过 CDN 引入，不打入 bundle 中</li><li>使用 <code>SplitChunksPlugin</code> 把公共脚本、基础包、页面公共文件等进行分离(Webpack4 内置) ，替代了 CommonsChunkPlugin 插件</li></ul></li><li><code>DLL</code><ul><li>使用 <code>DllPlugin</code> 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间</li><li>HashedModuleIdsPlugin 可以解决模块数字 id 问题</li></ul></li><li><code>Tree shaking</code><ul><li>打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的 bundle 中去掉(只能对 ES6 Modlue 生效) 开发中尽可能使用 ES6 Module 的模块，提高 tree shaking 效率</li><li>禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking</li><li>使用 uncss 去除无用 CSS 代码</li><li>purgecss-webpack-plugin 和 mini-css-extract-plugin 配合使用</li></ul></li><li><code>Scope hoisting</code><ul><li>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突</li><li>必须是 ES6 的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法</li></ul></li><li><code>动态Polyfill</code><ul><li>建议采用 polyfill-service 只给用户返回需要的 polyfill，社区维护。 (部分国内奇葩浏览器 UA 可能无法识别，但可以降级返回所需全部 polyfill)</li></ul></li></ul></details><h2 id="怎么去掉-console-log" tabindex="-1">怎么去掉 console.log <a class="header-anchor" href="#怎么去掉-console-log" aria-label="Permalink to &quot;怎么去掉 console.log&quot;">​</a></h2><h3 id="webpack-1" tabindex="-1">Webpack <a class="header-anchor" href="#webpack-1" aria-label="Permalink to &quot;Webpack&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Webpack 5 自带 terser-webpack-plugin；Webpack 4 需要安装 terser-webpack-plugin</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TerserWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terser-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 省略...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	minimizer: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerserWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        terserOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          compress: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            warnings: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            drop_console: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            drop_debugger: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pure_funcs: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;console.log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;console.table&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除console</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="在vite项目中" tabindex="-1">在Vite项目中 <a class="header-anchor" href="#在vite项目中" aria-label="Permalink to &quot;在Vite项目中&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>环境变量引入</p><p>vite已经将这个功能内置到了，所以我们只需要配置vite.config.js文件即可，起作用的文件包括drop_console去掉console信息drop_debugger为去掉debugger信息</p></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig, loadEnv } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minify: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;terser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    terserOptions: { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      compress: { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        drop_console: command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode, __dirname).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_API_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        drop_debugger: command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode, __dirname).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_API_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;prod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>打包： 命令: npm run build_prod</li></ul></details></details><h3 id="vue-cli-中配置" tabindex="-1">Vue-cli 中配置 <a class="header-anchor" href="#vue-cli-中配置" aria-label="Permalink to &quot;Vue-cli 中配置&quot;">​</a></h3><details class="details custom-block"><summary>这是在 Vue-cli 项目中推荐使用的清除 console 插件</summary><p>安装</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i babel-plugin-transform-remove-console --save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// babel.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;transform-remove-console&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境如下配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> prodPlugins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prodPlugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;transform-remove-console&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prodPlugins],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details><h3 id="手写-loader-删除" tabindex="-1">手写 Loader 删除 <a class="header-anchor" href="#手写-loader-删除" aria-label="Permalink to &quot;手写 Loader 删除&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ol><li>新建一个 js 文件，我这里名为 clearConsole.js，其实这里也是用正则去匹配然后替换为空</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(console</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">log</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\)</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>在 Vue.config.js 配置</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 省略...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configureWebpack: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./clearConsole.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          exclude:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./clearConsole.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>配置如上代码就可以啦~，清除 js 文件和 vue 文件里的 console.log。exclude 代表不去 node_module 目录下查找。</p></details><h3 id="其他物理方式" tabindex="-1">其他物理方式 <a class="header-anchor" href="#其他物理方式" aria-label="Permalink to &quot;其他物理方式&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">可了解，不推荐</p><p>开发中我们还是要，需要的只是线上代码不跑 log 就成：</p><ol><li>简单粗暴删除 console.log = function() {}</li><li>VS code 正则全局替换</li></ol></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="webpack-vite-rollup-的区别-还知道哪些打包工具-它们的区别" tabindex="-1">Webpack / Vite / Rollup 的区别？ 还知道哪些打包工具，它们的区别 <a class="header-anchor" href="#webpack-vite-rollup-的区别-还知道哪些打包工具-它们的区别" aria-label="Permalink to &quot;Webpack / Vite / Rollup 的区别？ 还知道哪些打包工具，它们的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特性</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>启动速速</td><td>慢</td><td>快</td></tr><tr><td>底层原理</td><td>原生 JS，相对 Vite 慢上不少</td><td>基于 ESbuild（go 语言）进行预构建</td></tr><tr><td>热更新</td><td>慢，需将依赖重新编译</td><td>快，模块改变，重新请求模块</td></tr><tr><td>打包速度</td><td>相对慢</td><td>相对快</td></tr><tr><td>打包体积</td><td>小，利用 rollup 进行打包，支持 Tree Shaking 和 ESM</td><td>需手动优化来进行压缩和 Tree Shaking</td></tr><tr><td>配置难度</td><td>大，可能用到脚手架</td><td>开箱即用，有默认优化配置</td></tr><tr><td>兼容性</td><td>良好</td><td>因支持 ESM，低版本浏览器兼容较差</td></tr><tr><td>生态对比</td><td>活跃度高，社区丰富</td><td>新工具，版本更新较快，稳定性稍逊</td></tr></tbody></table><ul><li><p>启动速度：Webpack 因为要先进行本地打包启动服务器后再去请求对应资源，导致启动时间稍长；而 Vite 不用像 Webpack 那样分析模块依赖，进行编译等操作，Vite 直接启了一个开发服务器，然后按需编译（得益于现代浏览器本身支持 ES Module）</p></li><li><p>底层原理：Webpack 使用原生 JS 进行代码编写，编译上不占优势；而 Vite 基于 esbuild 进行预构建，速度只有 webpack 的 2%-3%；esbuild 用 go 写的，速度比 js 写的快 10-100 倍，go（纳秒级）语言本身相对 js（毫秒级）来说就有很大的优势</p></li></ul></details><h3 id="vite-和-webpack-在热更新上的区别" tabindex="-1">Vite 和 Webpack 在热更新上的区别 <a class="header-anchor" href="#vite-和-webpack-在热更新上的区别" aria-label="Permalink to &quot;Vite 和 Webpack 在热更新上的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特点</th><th>Vite</th><th>Webpack</th></tr></thead><tbody><tr><td>实时热更新</td><td>支持模块级别的热更新，即只更新修改的模块，无需刷新整个页面</td><td>支持文件级别的热更新，修改任何文件都会触发整个应用的重新构建和刷新</td></tr><tr><td>构建速度</td><td>在开发环境下，利用浏览器原生的模块导入功能，不需要进行打包构建，启动速度更快</td><td>需要进行打包构建，每次修改代码都需要重新构建和编译，相对较慢</td></tr><tr><td>开发体验</td><td>提供更好的开发体验，修改代码后快速反馈，无需等待全量构建</td><td>反馈速度较慢，需要等待每次构建和编译完成</td></tr><tr><td>适用场景</td><td>适用于中小型项目，追求开发效率的前端项目</td><td>适用于大型项目，有复杂需求和更多构建优化的前端项目</td></tr></tbody></table></details><h3 id="source-map-是什么" tabindex="-1">source map 是什么 <a class="header-anchor" href="#source-map-是什么" aria-label="Permalink to &quot;source map 是什么&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>source map 是<strong>将编译、打包、压缩后的代码映射回源代码的过程</strong>。打包压缩后的代码不具备良好的可读性，想要<code>调试源码</code>就需要 soucre map。</p></details><h3 id="生产环境怎么用-source-map" tabindex="-1">生产环境怎么用 source map <a class="header-anchor" href="#生产环境怎么用-source-map" aria-label="Permalink to &quot;生产环境怎么用 source map&quot;">​</a></h3><details class="details custom-block"><summary>线上环境一般有三种处理方案</summary><ul><li><code>hidden-source-map</code>：借助第三方错误监控平台 Sentry 使用</li><li><code>nosources-source-map</code>：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li><li><code>sourcemap</code>：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li></ul><blockquote><p>注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积大小，并降低整体性能。 :::</p></blockquote><h3 id="文件指纹是什么-怎么用" tabindex="-1">文件指纹是什么？怎么用 <a class="header-anchor" href="#文件指纹是什么-怎么用" aria-label="Permalink to &quot;文件指纹是什么？怎么用&quot;">​</a></h3><details class="details custom-block"><summary>文件指纹是打包后输出的文件名的后缀：</summary><ul><li><code>Hash</code>：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li><li><code>Chunkhash</code>：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li><li><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li></ul></details></details><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7140769906080874504" target="_blank" rel="noreferrer">webpack 系列</a>——何逸轩</li><li><a href="https://juejin.cn/post/7113803425145421832" target="_blank" rel="noreferrer">前端打包工具介绍和对比</a>——卷起来的小白</li><li><a href="https://juejin.cn/post/6844904094281236487" target="_blank" rel="noreferrer">再来一打 Webpack 面试题</a>——童欧巴</li><li><a href="https://juejin.cn/post/6992749075326042126" target="_blank" rel="noreferrer">这些操作删除 console.log 代码，你都知道吗</a>——秦声</li><li><a href="https://juejin.cn/post/7044876656049127437" target="_blank" rel="noreferrer">vite项目初始化之~打包去掉console信息</a>——皓子</li></ul>`,56),t=[n];function p(r,h,k,d,o,c){return a(),i("div",null,t)}const E=s(e,[["render",p]]);export{b as __pageData,E as default};
