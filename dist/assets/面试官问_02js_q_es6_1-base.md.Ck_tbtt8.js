import{_ as s,c as a,o as i,V as e}from"./chunks/framework.CMKosmpS.js";const u=JSON.parse('{"title":"ES6","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/02js/q_es6_1-base.md","filePath":"面试官问/02js/q_es6_1-base.md","lastUpdated":1709779121000}'),l={name:"面试官问/02js/q_es6_1-base.md"},n=e(`<h1 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h1><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><h3 id="什么是-set" tabindex="-1">什么是 Set <a class="header-anchor" href="#什么是-set" aria-label="Permalink to &quot;什么是 Set&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Set 是一种叫做集合的数据结构。</p><ul><li>集合是由一组<code>无序</code>且<code>唯一</code>(即不能重复)的项组成的，可以想象成集合是一个既没有重复元素，也没有顺序概念的数组</li><li>ES6 提供了新的数据结构 Set。它<code>类似于数组</code>，但是成员的值都是唯一的，没有重复的值</li><li>Set 本身是一个构造函数，用来生成 Set 数据结构</li></ul></details><h3 id="set-实例的属性和方法" tabindex="-1">Set 实例的属性和方法 <a class="header-anchor" href="#set-实例的属性和方法" aria-label="Permalink to &quot;Set 实例的属性和方法&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Set 的属性：</p><ul><li><code>size</code> 返回集合所包含元素的数量</li></ul><p>Set 操作方法</p><ul><li><code>add(value)</code> 向集合添加一个新的项</li><li><code>delete(value)</code> 从集合中移除一个值</li><li><code>has(value)</code> 如果值在集合中存在，返回 true,否则 false</li><li><code>clear()</code> 移除集合里所有的项</li></ul><p>Set 遍历方法</p><ul><li><code>keys()</code> 返回一个包含集合中所有键的数组</li><li><code>values()</code> 返回一个包含集合中所有值的数组</li><li><code>entries()</code> 返回一个包含集合中所有键值对的数组</li><li><code>forEach()</code> 用于对集合成员执行某种操作，没有返回值</li></ul></details><h3 id="set-完整实现" tabindex="-1">Set 完整实现 <a class="header-anchor" href="#set-完整实现" aria-label="Permalink to &quot;Set 完整实现&quot;">​</a></h3><p><a href="./../../编写代码/02js/c_es6_1-set/c_es6_1-set.html">ES6 - Set 完整实现</a></p><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><h3 id="什么是-map" tabindex="-1">什么是 Map <a class="header-anchor" href="#什么是-map" aria-label="Permalink to &quot;什么是 Map&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>Map 是一种数据结构（它很特别，是一种抽象的数据结构类型），数据一对对进行存储，其中包含键以及映射到该键的值。并且由于键的唯一性，因此不存在重复的键值对。 Map 便是为了快速搜索和查找数据而生的。</p></details><h3 id="map-基本操作" tabindex="-1">Map 基本操作 <a class="header-anchor" href="#map-基本操作" aria-label="Permalink to &quot;Map 基本操作&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>访问元素</p><p>.get(key)</p></li><li><p>插入元素</p><p>.set(key, value)</p></li><li><p>删除元素</p><p>.delete(key)</p></li><li><p>获取大小</p><p>.size()</p></li><li><p>元素的迭代</p></li></ul><ol><li>可以通过 for...of 方法遍历</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//For map: { 2 =&gt; 3, 4 =&gt; 5 }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //Array[2,3]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //Array[4,5]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Or</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`key: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, value: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //key: 2, value: 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //key: 4, value: 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="2"><li>或者使用其内置的 forEach()方法：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`key: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, value: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//key: 2, value: 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//key: 4, value: 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></details><h3 id="map-和-object-区别" tabindex="-1">Map 和 Object 区别 <a class="header-anchor" href="#map-和-object-区别" aria-label="Permalink to &quot;Map 和 Object 区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><code>JSON 支持</code> JSON 直接支持 Object，但尚未支持 Map。因此，在某些我们必须使用 JSON 的情况下，应将 Object 视为首选</li><li>Map 是一个纯<code>哈希结构</code>，而 Object 不是（它拥有自己的内部逻辑）。使用 delete 对 Object 的属性进行删除操作存在很多性能问题。所以，针对于存在<code>大量增删操作的场景</code>，使用 <code>Map 更合适</code>。</li><li>不同于 Object，Map 会<code>保留所有元素的顺序</code>。Map 结构是在基于可迭代的基础上构建的，所以如果考虑到元素迭代或顺序，使用 Map 更好，它能够确保在所有浏览器中的<code>迭代性能</code></li><li>Map 在<code>存储大量数据的场景</code>下表现更好，尤其是在 key 为未知状态，并且所有 key 和所有 value 分别为相同类型的情况下</li><li>遍历方式不同： <ul><li>Object 迭代的是 key，通过 for in</li><li>Map 迭代的是 [key, value]，通过 for of</li></ul></li></ul></details><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903589920374792" target="_blank" rel="noreferrer">ES6 的 Set 和 Map 数据结构，由你制造</a>——chenhongdong</li><li><a href="https://juejin.cn/post/6844903792094232584" target="_blank" rel="noreferrer">Object 与 Map 的异同及使用场景</a>——Enivia</li></ul>`,17),t=[n];function p(h,k,r,d,c,o){return i(),a("div",null,t)}const b=s(l,[["render",p]]);export{u as __pageData,b as default};
