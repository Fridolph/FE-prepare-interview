import{_ as o,E as e,c as r,J as n,V as a,o as i}from"./chunks/framework.ig3M3oij.js";const f=JSON.parse('{"title":"计数排序 Counting Sort","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/s_sort_8-countingSort.md","filePath":"直击概念/03algo/s_sort_8-countingSort.md","lastUpdated":1708093373000}'),l={name:"直击概念/03algo/s_sort_8-countingSort.md"},s=a('<h1 id="计数排序-counting-sort" tabindex="-1">计数排序 Counting Sort <a class="header-anchor" href="#计数排序-counting-sort" aria-label="Permalink to &quot;计数排序 Counting Sort&quot;">​</a></h1><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。它只能对整数进行排序。</p><h2 id="算法描述" tabindex="-1">算法描述 <a class="header-anchor" href="#算法描述" aria-label="Permalink to &quot;算法描述&quot;">​</a></h2><ol><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li><li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1。</li></ol>',6),_=a('<h2 id="算法实现" tabindex="-1">算法实现 <a class="header-anchor" href="#算法实现" aria-label="Permalink to &quot;算法实现&quot;">​</a></h2><p><a href="./../../编写代码/03algo/c_sort_8-countingSort/c_sort_8-countingSort.html">计数排序实现</a></p><h2 id="算法分析" tabindex="-1">算法分析 <a class="header-anchor" href="#算法分析" aria-label="Permalink to &quot;算法分析&quot;">​</a></h2><blockquote><p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组 C 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p></blockquote><ul><li>最佳情况：T(n) = O(n+k)</li><li>最差情况：T(n) = O(n+k)</li><li>平均情况：T(n) = O(n+k)</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903444365443080" target="_blank" rel="noreferrer">十大经典排序算法总结（JavaScript 描述）</a></li></ul>',7);function c(h,u,d,p,g,m){const t=e("Image");return i(),r("div",null,[s,n(t,{alt:"计数排序动图演示",src:"/03algo/countingSort.gif"}),_])}const C=o(l,[["render",c]]);export{f as __pageData,C as default};
