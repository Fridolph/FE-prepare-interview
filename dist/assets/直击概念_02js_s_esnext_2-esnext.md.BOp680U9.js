import{_ as e,c as l,o as i,V as a}from"./chunks/framework.CMKosmpS.js";const m=JSON.parse('{"title":"ESNext","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/02js/s_esnext_2-esnext.md","filePath":"直击概念/02js/s_esnext_2-esnext.md","lastUpdated":1709785699000}'),t={name:"直击概念/02js/s_esnext_2-esnext.md"},r=a('<h1 id="esnext" tabindex="-1">ESNext <a class="header-anchor" href="#esnext" aria-label="Permalink to &quot;ESNext&quot;">​</a></h1><h2 id="es7-2016" tabindex="-1">ES7 - 2016 <a class="header-anchor" href="#es7-2016" aria-label="Permalink to &quot;ES7 - 2016&quot;">​</a></h2><ul><li>数组 includes()方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</li><li>a ** b 指数运算符，它与 Math.pow(a, b)相同。</li></ul><h2 id="es8-2017" tabindex="-1">ES8 - 2017 <a class="header-anchor" href="#es8-2017" aria-label="Permalink to &quot;ES8 - 2017&quot;">​</a></h2><ul><li><code>async/await</code></li><li>Object.values()</li><li>Object.entries()</li><li>String padding <code>padStart()</code> 和 <code>padEnd()</code>，填充字符串达到当前长度</li><li>函数参数列表结尾允许逗号</li><li>Object.getOwnPropertyDescriptors()</li><li>ShareArrayBuffer 和 Atomics 对象，用于从共享内存位置读取和写入</li></ul><h2 id="es9-2018" tabindex="-1">ES9 - 2018 <a class="header-anchor" href="#es9-2018" aria-label="Permalink to &quot;ES9 - 2018&quot;">​</a></h2><ul><li>异步迭代 <code>for of</code></li><li>Promise.finally()</li><li>Rest/Spread 属性</li><li>正则表达式命名捕获组（Regular Expression Named Capture Groups）</li><li>正则表达式反向断言（lookbehind）</li><li>正则表达式 dotAll 模式</li><li>正则表达式 Unicode 转义</li><li>非转义序列的模板字符串</li></ul><h2 id="es10-2019" tabindex="-1">ES10 - 2019 <a class="header-anchor" href="#es10-2019" aria-label="Permalink to &quot;ES10 - 2019&quot;">​</a></h2><ul><li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配</li><li>更加友好的 JSON.stringify</li><li>新增了 Array 的 <code>flat()</code> 方法和 <code>flatMap()</code> 方法</li><li>新增了 String 的 <code>trimStart()</code> 方法和 <code>trimEnd()</code> 方法</li><li>Object.fromEntries()</li><li>Symbol.prototype.description</li><li>String.prototype.matchAll</li><li>Function.prototype.toString()现在返回精确字符，包括空格和注释</li><li>简化 try {} catch {},修改 catch 绑定</li><li>新的基本数据类型 BigInt</li><li>globalThis</li><li>import()</li><li>Legacy RegEx</li><li>私有的实例方法和访问器</li></ul><h2 id="es11-2020" tabindex="-1">ES11 - 2020 <a class="header-anchor" href="#es11-2020" aria-label="Permalink to &quot;ES11 - 2020&quot;">​</a></h2><p>ES2020(ES11) 引入了以下新特性：</p><ul><li>String 的 matchAll 方法</li><li>动态导入语句 import()</li><li>import.meta</li><li><code>export * as ns from &#39;module&#39;</code></li><li>Promise.allSettled()</li><li>一种新的数据类型：BigInt</li><li>GlobalThis</li><li>Nullish coalescing Operator</li><li>Optional Chaining</li></ul><h2 id="es12-2021" tabindex="-1">ES12 - 2021 <a class="header-anchor" href="#es12-2021" aria-label="Permalink to &quot;ES12 - 2021&quot;">​</a></h2><ul><li>String.prototype.replaceAll</li><li>Promise.any &amp; AggregateError</li><li>逻辑赋值运算符 <code>??=</code> <code>&amp;&amp;=</code> <code>||=</code></li><li>WeakRef &amp; FinalizationRegistry（弱引用和垃圾回收监听）</li><li>Numeric literal separator（数字分隔符） <ul><li><code>1_000_000_000</code> // 1000000000</li></ul></li><li>Array.prototype.sort</li></ul><h2 id="es13-2022" tabindex="-1">ES13 - 2022 <a class="header-anchor" href="#es13-2022" aria-label="Permalink to &quot;ES13 - 2022&quot;">​</a></h2><ul><li><p>Class Fields</p><ul><li>Class Public Instance Fields 公共实例字段</li><li>Private Instance Fields 私有实例字段</li><li>Private instance methods and accessors 私有实例方法和访问器</li><li>Static class fields and methods 静态公共字段和方法</li><li>Private static class fields and methods 静态私有字段和方法</li></ul></li><li><p>Class Static Block 类静态初始化块</p></li><li><p>Ergonomic brand checks for Private Fields 私有字段检查</p></li><li><p>RegExp Match Indices</p></li><li><p>Top-level await</p></li><li><p><code>.at()</code></p></li><li><p>Error Cause</p></li><li><p>Accessible Object.prototype.hasOwnProperty</p></li></ul><h2 id="es14-2023" tabindex="-1">ES14 - 2023 <a class="header-anchor" href="#es14-2023" aria-label="Permalink to &quot;ES14 - 2023&quot;">​</a></h2><ul><li>Array.prototype.toSorted</li><li>Array.prototype.toReversed</li><li>Array.prototype.with</li><li>Array.prototype.findLast</li><li>Array.prototype.findLastIndex</li><li>Array.prototype.toSpliced</li><li>正式的 shebang 支持</li><li>Symbol 作为 WeakMap 的键</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903811622912014" target="_blank" rel="noreferrer">ES6、ES7、ES8、ES9、ES10 新特性一览</a>——上沅兮</li><li><a href="https://juejin.cn/post/6883306672064987149" target="_blank" rel="noreferrer">ES11 新增的这 9 个新特性，你都掌握了吗？</a>——无名之苝</li><li><a href="https://juejin.cn/post/7036574117033672712" target="_blank" rel="noreferrer">ES2021(ES12)新特性解读</a>——小吉很低调</li><li><a href="https://juejin.cn/post/7060329023569657892" target="_blank" rel="noreferrer">ES2022(ES13)新特性解读</a></li><li><a href="https://juejin.cn/post/7279719681444528163" target="_blank" rel="noreferrer">ES14新特性揭秘，对前端开发有哪些影响？</a>——Bun</li></ul>',20),o=[r];function s(n,c,d,p,h,u){return i(),l("div",null,o)}const f=e(t,[["render",s]]);export{m as __pageData,f as default};
