import{_ as a,E as o,c as d,J as l,V as t,o as i}from"./chunks/framework.CMKosmpS.js";const f=JSON.parse('{"title":"HTML 基础","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/01htmlcss/q_html_1-base.md","filePath":"面试官问/01htmlcss/q_html_1-base.md","lastUpdated":1709113218000}'),r={name:"面试官问/01htmlcss/q_html_1-base.md"},c=t('<h1 id="html-基础" tabindex="-1">HTML 基础 <a class="header-anchor" href="#html-基础" aria-label="Permalink to &quot;HTML 基础&quot;">​</a></h1><h2 id="如何理解语义化" tabindex="-1">如何理解语义化 <a class="header-anchor" href="#如何理解语义化" aria-label="Permalink to &quot;如何理解语义化&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><ol><li><p>让人更容易读懂（<code>同时增加代码可读性</code>）</p></li><li><p>让搜索引擎更容易读懂</p></li></ol><p>通过合理的语义化：</p><ul><li>可以使得<code>网页结构更加清晰</code></li><li>有助于<code>页面的可读性和可访问性的提高</code></li><li><code>利于搜索引擎</code>的爬取和排名</li><li>使得网页可以更好地为用户所用</li></ul></details><h2 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h2><h3 id="常见的-meta-标签有哪些" tabindex="-1">常见的 meta 标签有哪些 <a class="header-anchor" href="#常见的-meta-标签有哪些" aria-label="Permalink to &quot;常见的 meta 标签有哪些&quot;">​</a></h3><p>&quot;meta&quot;标签是 HTML 标签之一, 常用于对页面的元数据(metadata)进行描述和定义，包括网页的关键词、页描、作者、字符编码、视口大小、缩放比例等信息。以下是常见的&quot;meta&quot;标签及其含义：</p><details class="details custom-block"><summary>详细信息</summary><ul><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：定义字符编码为 UTF-8，确保页面能够正确地显示特殊字符；</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>：定义视口大小为设备宽度，缩放比例为 1，确保在手机等移动设备上显示正常；</li><li><code>&lt;meta name=&quot;keywords&quot; content=&quot;关键词1, 关键词2, ...&quot;&gt;</code>：定义网页的关键词，便于搜索引擎抓取和分析网页主题；</li><li><code>&lt;meta name=&quot;description&quot; content=&quot;网页描述&quot;&gt;</code>：定义网页描述信息，便于搜索引擎显示搜索结果摘要描述；</li><li><code>&lt;meta name=&quot;author&quot; content=&quot;作者&quot;&gt;</code>：定义网页作者信息；</li><li><code>&lt;meta HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;3;URL=http://www.example.com/&quot;&gt;</code>：定义网页跳转规则，如每隔 3 秒自动跳转到指定网址；</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;</code>：定义搜索引擎对网页的抓取策略，&quot;index&quot;表示允许抓取该网页，&quot;noindex&quot;则表示不允许抓取；&quot;follow&quot;表示跟踪该网页中所有的链接，&quot;nofollow&quot;则表示不跟踪；</li><li><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</code>：定义是否禁止自动检测页面中的电话号码，避免误触拨打电话。</li></ul></details><h3 id="script-标签中-defer-和-async-的区别" tabindex="-1">script 标签中 defer 和 async 的区别 <a class="header-anchor" href="#script-标签中-defer-和-async-的区别" aria-label="Permalink to &quot;script 标签中 defer 和 async 的区别&quot;">​</a></h3><p>defer 和 async 属性都是去<code>异步加载</code>外部的 JS 脚本</p><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特性</th><th>async</th><th>defer</th></tr></thead><tbody><tr><td>阻塞解析</td><td>异步加载，可能阻塞 HTML 解析</td><td>异步加载，不阻塞 HTML 解析</td></tr><tr><td>执行顺序</td><td>谁先加载好先执行谁</td><td>按照文档顺序严格执行</td></tr><tr><td>执行时机</td><td>加载完立即执行，DOM 尚未完全构建好就加载和执行</td><td>等到文档所有元素解析完成后 DOMContentLoaded 之前执行</td></tr></tbody></table><ul><li>async 是 js 只要一<code>加载完毕就会马上执行</code> 不管 html 有没有解析完毕，所以它有<code>可能阻塞 html 解析</code></li><li>defer 要等到 <code>html 解析完毕之后</code>才执行。所以<code>不会阻塞 html 解析</code></li></ul></details><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="什么时候用-href-什么时候用-src" tabindex="-1">什么时候用 href，什么时候用 src <a class="header-anchor" href="#什么时候用-href-什么时候用-src" aria-label="Permalink to &quot;什么时候用 href，什么时候用 src&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>src 指向的内容会<code>嵌入到文档中</code>当前标签所在的位置。常用的有：img、script、iframe。</li><li>href 是 Hypertext Reference 的缩写，表示<code>超文本引用</code>。用来建立当前元素和文档之间的链接。href 目的不是为了引用资源，而是为了建立联系，让当前标签能够链接到目标地址。常用的有：link、a。</li><li>总结: src 用于替换当前元素(比如：引入一张图片)；href 用于在当前文档和引用资源之间建立联系。</li></ul></details><h3 id="link-和-import-的区别" tabindex="-1">link 和 @import 的区别 <a class="header-anchor" href="#link-和-import-的区别" aria-label="Permalink to &quot;link 和 @import 的区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><table><thead><tr><th>特性</th><th>link</th><th>@import</th></tr></thead><tbody><tr><td>概念</td><td>是 XHTML 标签，还可以定义 RSS 等其他事务</td><td>属于 CSS 范畴，只可以加载 CSS</td></tr><tr><td>加载顺序</td><td>引用 CSS 时，在页面载入时同时加载</td><td>需要页面完全载入以后再加载</td></tr><tr><td>JS 控制</td><td>支持使用 JS 控制 DOM 改变样式</td><td>不支持</td></tr><tr><td>兼容性</td><td>无兼容问题</td><td>低版本的浏览器不支持</td></tr></tbody></table></details><h2 id="元素的层叠顺序" tabindex="-1">元素的层叠顺序 <a class="header-anchor" href="#元素的层叠顺序" aria-label="Permalink to &quot;元素的层叠顺序&quot;">​</a></h2>',16),s=t('<details class="details custom-block"><summary>详细信息</summary><p>对于上图，由上到下分别是：</p><ol><li><code>背景和边框</code> 建立当前层叠上下文元素的背景和边框。</li><li><code>负z-index</code> 当前层叠上下文中，z-index 属性值为负的元素。</li><li><code>块级盒</code> 文档流内非行内级非定位后代元素。</li><li><code>浮动盒</code> 非定位浮动元素。</li><li><code>行内盒</code> 文档流内行内级非定位后代元素。</li><li><code>z-index:0</code> 层叠级数为 0 的定位元素。</li><li><code>正z-index</code> z-index 属性值为正的定位元素。注意: 当定位元素 z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。</li></ol></details><h2 id="html5-drag-api" tabindex="-1">HTML5 drag API <a class="header-anchor" href="#html5-drag-api" aria-label="Permalink to &quot;HTML5 drag API&quot;">​</a></h2><details class="details custom-block"><summary>详细信息</summary><ul><li><code>dragstart</code> 事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li><li><code>darg</code> 事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li><li><code>dragenter</code> 事件主体是目标元素，在被拖放元素进入某元素时触发。</li><li><code>dragover</code> 事件主体是目标元素，在被拖放在某元素内移动时触发。</li><li><code>dragleave</code> 事件主体是目标元素，在被拖放元素移出目标元素是触 发。</li><li><code>drop</code> 事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li><li><code>dragend</code> 事件主体是被拖放元素，在整个拖放操作结束时触发。</li></ul></details><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7227787460968415289#heading-1" target="_blank" rel="noreferrer">前端（HTML+CSS+JS+打包+环境+网络）</a></li></ul>',5);function n(h,m,u,q,_,p){const e=o("Image");return i(),d("div",null,[c,l(e,{src:"/01htmlcss/layer.jpg",alt:"元素的层叠顺序"}),s])}const k=a(r,[["render",n]]);export{f as __pageData,k as default};
