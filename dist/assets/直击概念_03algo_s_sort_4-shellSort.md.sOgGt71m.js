import{_ as t,E as r,c as o,J as l,V as e,o as s}from"./chunks/framework.ig3M3oij.js";const f=JSON.parse('{"title":"希尔排序 Shell Sort","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/s_sort_4-shellSort.md","filePath":"直击概念/03algo/s_sort_4-shellSort.md","lastUpdated":1708093373000}'),h={name:"直击概念/03algo/s_sort_4-shellSort.md"},n=e('<h1 id="希尔排序-shell-sort" tabindex="-1">希尔排序 Shell Sort <a class="header-anchor" href="#希尔排序-shell-sort" aria-label="Permalink to &quot;希尔排序 Shell Sort&quot;">​</a></h1><blockquote><p>1959 年 Shell 发明； 第一个突破 O(n^2)的排序算法；是简单插入排序的改进版；它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序</p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第 4 版》的合著者 Robert Sedgewick 提出的。</p><h2 id="算法描述" tabindex="-1">算法描述 <a class="header-anchor" href="#算法描述" aria-label="Permalink to &quot;算法描述&quot;">​</a></h2><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ol><li>选择一个增量序列 t1，t2，…，tk，其中 ti&gt;tj，tk=1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><h2 id="图解希尔算法" tabindex="-1">图解希尔算法 <a class="header-anchor" href="#图解希尔算法" aria-label="Permalink to &quot;图解希尔算法&quot;">​</a></h2>',8),i=e('<h2 id="算法实现" tabindex="-1">算法实现 <a class="header-anchor" href="#算法实现" aria-label="Permalink to &quot;算法实现&quot;">​</a></h2><p><a href="./../../编写代码/03algo/c_sort_4-shellSort/c_sort_4-shellSort.html">希尔排序实现</a></p><h2 id="算法分析" tabindex="-1">算法分析 <a class="header-anchor" href="#算法分析" aria-label="Permalink to &quot;算法分析&quot;">​</a></h2><ul><li>最佳情况：T(n) = O(nlog2 n)</li><li>最坏情况：T(n) = O(nlog2 n)</li><li>平均情况：T(n) =O(nlog n)</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://algo.itcharge.cn/01.Array/02.Array-Sort/04.Array-Shell-Sort/#_2-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4" target="_blank" rel="noreferrer">算法通关手册-希尔排序</a></li><li><a href="https://juejin.cn/post/6844903444365443080" target="_blank" rel="noreferrer">十大经典排序算法总结（JavaScript 描述）</a></li></ul>',6);function _(c,d,p,g,S,u){const a=r("Image");return s(),o("div",null,[n,l(a,{alt:"1",src:"/03algo/shell1.png"}),l(a,{alt:"2",src:"/03algo/shell2.png"}),l(a,{alt:"3",src:"/03algo/shell3.png"}),l(a,{alt:"4",src:"/03algo/shell4.png"}),l(a,{alt:"5",src:"/03algo/shell5.png"}),l(a,{alt:"6",src:"/03algo/shell6.png"}),l(a,{alt:"7",src:"/03algo/shell7.png"}),i])}const b=t(h,[["render",_]]);export{f as __pageData,b as default};
