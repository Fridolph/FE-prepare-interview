import{_ as o,E as l,c as s,J as c,m as a,a as e,V as r,o as i}from"./chunks/framework.GzbH9VPN.js";const V=JSON.parse('{"title":"栈","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/s_algo_1-stack.md","filePath":"直击概念/03algo/s_algo_1-stack.md","lastUpdated":1708093373000}'),_={name:"直击概念/03algo/s_algo_1-stack.md"},n=a("h1",{id:"栈",tabindex:"-1"},[e("栈 "),a("a",{class:"header-anchor",href:"#栈","aria-label":'Permalink to "栈"'},"​")],-1),d=a("p",null,"在计算机科学中，栈是一种线性数据结构。",-1),h=a("p",null,"::: 可以这样理解 一个栈可以对数据按照顺序进行组织和管理 :::",-1),p=a("p",null,"两个启发性的例子:使用堆栈来组织数据，来实现文本编辑器的“撤消”操作;使用队列处理数据，实现 web 浏览器的事件循环处理事件(单击 click、悬停 hoover 等)。",-1),u=a("h2",{id:"栈的操作",tabindex:"-1"},[e("栈的操作 "),a("a",{class:"header-anchor",href:"#栈的操作","aria-label":'Permalink to "栈的操作"'},"​")],-1),m=r('<p>现在我们对栈的模型有了基本概念，下一步就要定义栈的两个操作：</p><ul><li>push(data) 添加数据</li><li>pop() 删除最后添加的数据</li></ul><h2 id="栈的属性" tabindex="-1">栈的属性 <a class="header-anchor" href="#栈的属性" aria-label="Permalink to &quot;栈的属性&quot;">​</a></h2><ul><li><code>_size</code> 表示 栈的大小（长度），私有属性</li><li><code>_storage</code> 用来存储栈的对象，私有属性</li></ul><h2 id="栈的实现" tabindex="-1">栈的实现 <a class="header-anchor" href="#栈的实现" aria-label="Permalink to &quot;栈的实现&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">跳转到编写代码</p><p><a href="./../../编写代码/03algo/c_algo_1-stack/c_algo_1-stack.html">栈的实现</a></p></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>图片转自 <a href="https://algo.itcharge.cn/03.Stack/01.Stack-Basic/01.Stack-Basic/" target="_blank" rel="noreferrer">算法通关手册</a></li></ul>',8);function k(g,f,b,x,P,S){const t=l("Image");return i(),s("div",null,[n,d,h,p,u,c(t,{src:"/03algo/stack.png",alt:"堆栈的基本操作"}),m])}const q=o(_,[["render",k]]);export{V as __pageData,q as default};
