import{_ as s,c as a,o as i,V as e}from"./chunks/framework.ig3M3oij.js";const g=JSON.parse('{"title":"WebSocket","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/04http/s_http_8-websocket.md","filePath":"直击概念/04http/s_http_8-websocket.md","lastUpdated":1707667702000}'),n={name:"直击概念/04http/s_http_8-websocket.md"},t=e(`<h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h1><p>WebSocket 是一种<code>网络传输协议</code>，可在单个 TCP 连接上进行<code>全双工通信</code>，位于 OSI 模型的<code>应用层</code>。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，<strong>允许服务端主动向客户端推送数据</strong>。在 WebSocket API 中，浏览器和服务器只需要完成<code>一次握手</code>，两者之间就可以<code>建立持久性的连接</code>，并进行<code>双向数据传输</code>。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>WebSocket 通过 HTTP 端口 80 和 443 进行工作，并<code>支持 HTTP 代理和中介</code>，从而使其<code>与 HTTP 协议兼容</code>。 为了实现兼容性，WebSocket 握手使用 HTTP Upgrade 头从 HTTP 协议更改为 WebSocket 协议。</p><p>WebSocket 协议支持 Web 浏览器（或其他客户端应用程序）与 Web 服务器之间的交互，具有较低的开销，便于实现客户端与服务器的<code>实时数据传输</code>。</p><p>服务器可以通过标准化的方式来实现，而无需客户端首先请求内容，并允许消息在保持连接打开的同时来回传递。通过这种方式，可以在客户端和服务器之间进行<code>双向持续对话</code>。</p><p>WebSocket 提供全双工通信。此外，WebSocket 还可以在 TCP 之上实现消息流。TCP 单独处理字节流，没有固有的消息概念。</p><h2 id="websocket-的优点" tabindex="-1">WebSocket 的优点 <a class="header-anchor" href="#websocket-的优点" aria-label="Permalink to &quot;WebSocket 的优点&quot;">​</a></h2><h3 id="较少的控制开销" tabindex="-1">较少的控制开销 <a class="header-anchor" href="#较少的控制开销" aria-label="Permalink to &quot;较少的控制开销&quot;">​</a></h3><p>在连接建立后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。在不包含扩展的情况下，对于服务器到客户端的内容，此头部大小只有 2 至 10 字节（和数据包长度有关）；对于客户端到服务器的内容，此头部还需要加上额外的 4 字节的掩码。相对于 HTTP 请求每次都要携带完整的头部，此项开销显著减少了。</p><h3 id="更强的实时性" tabindex="-1">更强的实时性 <a class="header-anchor" href="#更强的实时性" aria-label="Permalink to &quot;更强的实时性&quot;">​</a></h3><p>由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于 HTTP 请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和 Comet 等类似的长轮询比较，其也能在短时间内更多次地传递数据。</p><h3 id="保持连接状态" tabindex="-1">保持连接状态 <a class="header-anchor" href="#保持连接状态" aria-label="Permalink to &quot;保持连接状态&quot;">​</a></h3><p>与 HTTP 不同的是，Websocket 需要先建立连接，这就使得其成为一种<code>有状态的协议</code>，之后通信时可以省略部分状态信息。而 HTTP 请求可能需要在每个请求都携带状态信息（如身份认证等）</p><h3 id="更好的二进制支持" tabindex="-1">更好的二进制支持 <a class="header-anchor" href="#更好的二进制支持" aria-label="Permalink to &quot;更好的二进制支持&quot;">​</a></h3><p>Websocket 定义了<code>二进制帧</code>，相对 HTTP，可以更轻松地处理二进制内容。</p><h3 id="可以支持扩展" tabindex="-1">可以支持扩展 <a class="header-anchor" href="#可以支持扩展" aria-label="Permalink to &quot;可以支持扩展&quot;">​</a></h3><p>Websocket 定义了扩展，用户可以扩展协议、实现部分自定义的子协议。如部分浏览器支持压缩等。</p><h3 id="更好的压缩效果" tabindex="-1">更好的压缩效果 <a class="header-anchor" href="#更好的压缩效果" aria-label="Permalink to &quot;更好的压缩效果&quot;">​</a></h3><p>相对于 HTTP 压缩，Websocket 在适当的扩展支持下，<strong>可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率</strong>。</p><h2 id="握手协议" tabindex="-1">握手协议 <a class="header-anchor" href="#握手协议" aria-label="Permalink to &quot;握手协议&quot;">​</a></h2><p>WebSocket 是独立的、建立在 TCP 上的协议。Websocket 通过 HTTP/1.1 协议的 101 状态码进行握手。</p><p>为了建立 Websocket 连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“握手”（<code>Handshaking</code>）。</p><details class="details custom-block"><summary>一个典型的 Websocket 握手请求如下</summary><p>客户端请求：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /chat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dGhlIHNhbXBsZSBub25jZQ==</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chat, superchat</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 13</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>服务器回应：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-WebSocket-Protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>字段说明</strong></p><ul><li>Connection 必须设置 Upgrade，表示客户端希望连接升级。</li><li>Upgrade 字段必须设置 Websocket，表示希望升级到 Websocket 协议。</li><li>Sec-WebSocket-Key 是随机的字符串，服务器端会用这些数据来构造出一个 SHA-1 的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算 SHA-1 摘要，之后进行 Base64 编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通 HTTP 请求被误认为 Websocket 协议。</li><li>Sec-WebSocket-Version 表示支持的 Websocket 版本。RFC6455 要求使用的版本是 13，之前草案的版本均应当弃用。</li><li>Origin 字段是必须的。如果缺少 origin 字段，WebSocket 服务器需要回复 HTTP 403 状态码（禁止访问）。</li><li>其他一些定义在 HTTP 协议中的字段，如 Cookie 等，也可以在 Websocket 中使用。</li></ul></details><h2 id="websocket-构造函数" tabindex="-1">WebSocket 构造函数 <a class="header-anchor" href="#websocket-构造函数" aria-label="Permalink to &quot;WebSocket 构造函数&quot;">​</a></h2><p>WebSocket 对象提供了用于创建和管理 WebSocket 连接，以及可以通过该连接发送和接收数据的 API。</p><p>使用 WebSocket() 构造函数来构造一个 WebSocket。</p><h3 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h3><table><thead><tr><th>Constant</th><th>Value</th></tr></thead><tbody><tr><td>WebSocket.CONNECTING</td><td>0</td></tr><tr><td>WebSocket.OPEN</td><td>1</td></tr><tr><td>WebSocket.CLOSING</td><td>2</td></tr><tr><td>WebSocket.CLOSED</td><td>3</td></tr></tbody></table><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><blockquote><p>这里只例举一些常用的，更多请自行查看文档</p></blockquote><ul><li><p>WebSocket.onopen 用于指定连接成功后的回调函数。</p></li><li><p>WebSocket.onmessage 用于指定当从服务器接受到信息时的回调函数。</p></li><li><p>WebSocket.onclose 用于指定连接关闭后的回调函数。</p></li><li><p>WebSocket.onerror 用于指定连接失败后的回调函数。</p></li><li><p>WebSocket.protocol <code>只读</code> 服务器选择的下属协议。</p></li><li><p>WebSocket.readyState <code>只读</code> 当前的链接状态。</p></li><li><p>WebSocket.url <code>只读</code> WebSocket 的绝对路径。</p></li></ul><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><p>WebSocket.close([code[, reason]]) 关闭当前链接。</p></li><li><p>WebSocket.send(data) 对要传输的数据进行排队。</p></li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>使用 addEventListener() 或将一个事件监听器赋值给本接口的 oneventname 属性，来监听下面的事件。</p><ul><li><p>close 当一个 WebSocket 连接被关闭时触发。 也可以通过 onclose 属性来设置。</p></li><li><p>error 当一个 WebSocket 连接因错误而关闭时触发，例如无法发送数据时。 也可以通过 onerror 属性来设置。</p></li><li><p>message 当通过 WebSocket 收到数据时触发。 也可以通过 onmessage 属性来设置。</p></li><li><p>open 当一个 WebSocket 连接成功时触发。 也可以通过 onopen 属性来设置。</p></li></ul><h3 id="简单示例" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-label="Permalink to &quot;简单示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create WebSocket connection.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ws://localhost:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Connection opened</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Server!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Listen for messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Message from server &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="noreferrer">维基 WebSocket</a></li></ul>`,42),l=[t];function p(h,k,r,o,c,d){return i(),a("div",null,l)}const E=s(n,[["render",p]]);export{g as __pageData,E as default};
