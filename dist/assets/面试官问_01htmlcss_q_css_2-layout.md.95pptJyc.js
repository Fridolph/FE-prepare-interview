import{_ as l,c as a,o as e,V as i}from"./chunks/framework.ig3M3oij.js";const h=JSON.parse('{"title":"CSS layout","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/01htmlcss/q_css_2-layout.md","filePath":"面试官问/01htmlcss/q_css_2-layout.md","lastUpdated":1708489860000}'),o={name:"面试官问/01htmlcss/q_css_2-layout.md"},t=i('<h1 id="css-layout" tabindex="-1">CSS layout <a class="header-anchor" href="#css-layout" aria-label="Permalink to &quot;CSS layout&quot;">​</a></h1><p>布局相关</p><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p><a href="./../../直击概念/01htmlcss/s_css_1-BFC.html">直击概念 - BFC</a></p><h3 id="什么是-bfc" tabindex="-1">什么是 BFC <a class="header-anchor" href="#什么是-bfc" aria-label="Permalink to &quot;什么是 BFC&quot;">​</a></h3><p>Block format context——<code>块级格式化上下文</code>。 是一块独立渲染的区域，<code>内部元素的渲染不会影响边界以外的元素</code></p><h3 id="形成-bfc-的条件" tabindex="-1">形成 BFC 的条件 <a class="header-anchor" href="#形成-bfc-的条件" aria-label="Permalink to &quot;形成 BFC 的条件&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>float 不是 none</p></li><li><p>overflow 不是 visible；</p></li><li><p>position 是 fixed 和 absolute；</p></li><li><p>display 是 flex , inline-block 等</p></li></ul></details><h3 id="bfc-的应用" tabindex="-1">BFC 的应用 <a class="header-anchor" href="#bfc-的应用" aria-label="Permalink to &quot;BFC 的应用&quot;">​</a></h3><p>主要用于<code>清除浮动</code> 及 <code>解决高度塌陷</code>，具体如下：</p><details class="details custom-block"><summary>详细信息</summary><ol><li><p>相邻兄弟元素的 margin-bottom 和 margin-top 发生重叠，这时候我们可以设置其中一个元素为 BFC 即可解决</p></li><li><p>没有内容的元素，自身的 margin-top 和 margin-bottom 发生重叠时：</p></li></ol><ul><li>元素设置 padding 或 border</li><li>给元素设置一个高度</li></ul><ol start="3"><li>父元素的 margin-top 和子元素的 margin-top 发生重叠，他们发生重叠是因为这两个元素是相邻的</li></ol><ul><li>为父元素设置 padding-top 或 border-top 来分割他们</li><li>设置父元素为 BFC。 ​</li><li>父元素和第一个子元素之间添加一个内联元素来进行分割</li></ul><ol start="4"><li>高度为 auto 的父元素的 margin-bottom 和最后一个子元素的 margin-bottom 发生重叠，他们发生重叠一个原因是<code>他们是相邻</code>的，另一个原因是<code>父元素的高度是不固定</code>的，解决如下：</li></ol><ul><li>为父元素设置 padding-top 或 border-top 来分割他们</li><li>设置父元素为 BFC</li><li>父元素和第一个子元素之间添加一个内联元素来进行分割</li></ul></details><h2 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h2><h3 id="flex-常用语法" tabindex="-1">flex 常用语法 <a class="header-anchor" href="#flex-常用语法" aria-label="Permalink to &quot;flex 常用语法&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>flex-direction 项目排列方式</li><li>flex-wrap 是否换行</li><li>flex-direcion</li><li>justify-content 项目横轴对齐方式</li><li>align-content 在项目为多行时需要加 flex-wrap:wrap，项目纵轴如何对齐（不能控制单行的盒子内位置变换）</li><li>align-items（控制容器）项目纵轴如何对齐（能控制单行的盒子内位置变换）</li><li>align-self（控制子项）容器子项纵轴如何对齐</li></ul></details><h3 id="flex-是哪几个属性的缩写" tabindex="-1">flex 是哪几个属性的缩写 <a class="header-anchor" href="#flex-是哪几个属性的缩写" aria-label="Permalink to &quot;flex 是哪几个属性的缩写&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>flex-grow</p><p>设置 flex 项在容器中<code>分配剩余空间的相对比例</code>。剩余空间是 flex 容器的大小减去所有 flex 项的大小加起来的大小。如果所有的兄弟项目都有相同的 flex-grow 系数，那么所有的项目将剩余空间按相同比例分配，否则将根据不同的 flex-grow 定义的比例进行分配。</p></li><li><p>flex-shrink</p><p>属性指定了 flex 元素的<code>收缩规则</code>。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值</p></li><li><p>flex-basis</p><p>指定了 flex 元素在主轴方向上的<code>初始大小</code>。如果不使用 box-sizing 改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的尺寸</p></li></ul></details>',16),s=[t];function r(c,d,n,f,p,u){return e(),a("div",null,s)}const x=l(o,[["render",r]]);export{h as __pageData,x as default};
