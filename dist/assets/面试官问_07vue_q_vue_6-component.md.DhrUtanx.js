import{_ as l,c as a,m as s,a as i,V as n,o as e}from"./chunks/framework.CMKosmpS.js";const q=JSON.parse('{"title":"Vue 组件","description":"","frontmatter":{},"headers":[],"relativePath":"面试官问/07vue/q_vue_6-component.md","filePath":"面试官问/07vue/q_vue_6-component.md","lastUpdated":1709101052000}'),t={name:"面试官问/07vue/q_vue_6-component.md"},p=n(`<h1 id="vue-组件" tabindex="-1">Vue 组件 <a class="header-anchor" href="#vue-组件" aria-label="Permalink to &quot;Vue 组件&quot;">​</a></h1><h2 id="vue-组件的几种通信方式" tabindex="-1">Vue 组件的几种通信方式 <a class="header-anchor" href="#vue-组件的几种通信方式" aria-label="Permalink to &quot;Vue 组件的几种通信方式&quot;">​</a></h2><p>可以从以下方面展开回答：</p><ul><li>解释一下父组件与子组件传值实现过程</li><li>非父子组件的数据传递，兄弟组件传值是如何实现的</li><li>跨组件通信</li></ul><h3 id="_1-props-emit" tabindex="-1">1. props / $emit <a class="header-anchor" href="#_1-props-emit" aria-label="Permalink to &quot;1. props / $emit&quot;">​</a></h3><p>父向子传值 <code>props</code></p><p>子向父传值，通过 <code>$emit</code> 触发父组件的方法，可传递参数</p><h3 id="_2-eventbus-事件总线-emit-on" tabindex="-1">2. eventBus 事件总线 $emit / $on <a class="header-anchor" href="#_2-eventbus-事件总线-emit-on" aria-label="Permalink to &quot;2. eventBus 事件总线 $emit / $on&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>创建事件中心管理组件之间的通信：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// event-bus.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventBus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 firstCom 组件中发送事件：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;add&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { EventBus } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./event-bus.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      num: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;addition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        num: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在 secondCom 组件中接收事件</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;求和: {{ count }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { EventBus } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./event-bus.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;addition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param.num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></details><h3 id="_3-依赖注入-provide-inject" tabindex="-1">3. 依赖注入 provide / inject <a class="header-anchor" href="#_3-依赖注入-provide-inject" aria-label="Permalink to &quot;3. 依赖注入 provide / inject&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>该方法用于父子（子孙）组件之间的通信。 provide / inject 是 Vue 提供的两个钩子，和 data 、 methods 是同级的。</p><ul><li><code>provide</code> 钩子用来<code>发送数据或方法</code></li><li><code>inject</code> 钩子用来<code>接收数据或方法</code></li></ul></details><h3 id="_4-ref-refs" tabindex="-1">4. ref / $refs <a class="header-anchor" href="#_4-ref-refs" aria-label="Permalink to &quot;4. ref / $refs&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>子组件定好 ref，父组件通过 <code>this.$refs[childRef]</code> 获取子组件实例，从而调用子组件的方法或访问子组件的数据。</p></details><h3 id="_5-parent-children" tabindex="-1">5. parent / children <a class="header-anchor" href="#_5-parent-children" aria-label="Permalink to &quot;5. parent / children&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>通过 parent 访问到的是上一级父组件的实例，可以使用 <code>$root 来访问根组件</code></li><li><code>在组件中使用 $children 拿到的是所有的子组件的实例</code>，它是一个无序数组</li><li>children 的值是数组，而 $parent 是个对象</li></ul></details><h3 id="_6-attrs-listeners" tabindex="-1">6. attrs / listeners <a class="header-anchor" href="#_6-attrs-listeners" aria-label="Permalink to &quot;6. attrs / listeners&quot;">​</a></h3><p>用于组件之间的跨代通信。<code>inheritAttrs</code> 默认值为 true，继承父组件除 props 之外的所有属性；当该值为false时，只继承 class 属性</p><ul><li><code>attrs</code> 继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上</li><li><code>listeners</code> 该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 <code>v-on=&quot;$listeners&quot;</code> 将所有的事件监听器指向这个组件的某个特定的子元素</li></ul><h3 id="_7-vuex" tabindex="-1">7. Vuex <a class="header-anchor" href="#_7-vuex" aria-label="Permalink to &quot;7. Vuex&quot;">​</a></h3><h2 id="slot" tabindex="-1">Slot <a class="header-anchor" href="#slot" aria-label="Permalink to &quot;Slot&quot;">​</a></h2><h3 id="说说你对-slot-的理解" tabindex="-1">说说你对 slot 的理解 <a class="header-anchor" href="#说说你对-slot-的理解" aria-label="Permalink to &quot;说说你对 slot 的理解&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ol><li><p>在 HTML 中 slot 元素 ，作为 Web Components 技术套件的一部分，是 Web 组件内的一个占位符</p></li><li><p>该占位符可以在后期使用自己的标记语言填充</p></li><li><p>template 不会展示到页面中，需要用先获取它的引用，然后添加到 DOM 中，在 Vue 中的概念也是如此</p></li><li><p>Slot 艺名插槽。我们可以理解为 solt 在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中 slot 位置），作为承载分发内容的出口</p></li></ol></details><h3 id="slot-使用场景有哪些" tabindex="-1">slot 使用场景有哪些 <a class="header-anchor" href="#slot-使用场景有哪些" aria-label="Permalink to &quot;slot 使用场景有哪些&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li>通过插槽可以拓展组件，去更好地复用组件和对其做定制化处理</li><li>通过 slot 插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用</li><li>比如：布局组件、表格列、下拉选、弹框显示内容等</li></ul></details><h2 id="keep-alive" tabindex="-1">keep-alive <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;keep-alive&quot;">​</a></h2><h3 id="说一下-keep-alive" tabindex="-1">说一下 keep-alive <a class="header-anchor" href="#说一下-keep-alive" aria-label="Permalink to &quot;说一下 keep-alive&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>keep-alive 组件是 vue 的<code>内置组件</code>，用于<code>缓存内部组件实例</code>。这样做的目的在于，keep-alive <strong>内部的组件切回时，不用重新创建组件实例，而直接使用缓存中的实例</strong>，一方面能够<code>避免创建组件带来的开销</code>，另一方面可以<code>保留组件的状态</code>。</p></details><h3 id="keep-alive-的常用属性有哪些" tabindex="-1">keep-alive 的常用属性有哪些 <a class="header-anchor" href="#keep-alive-的常用属性有哪些" aria-label="Permalink to &quot;keep-alive 的常用属性有哪些&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><code>include</code> 和 <code>exclude</code> 属性，通过它们可以控制哪些组件进入缓存。</li><li><code>max</code> 属性，通过它可以设置最大缓存数，当缓存的实例超过该数时，vue 会移除最久没有使用的组件缓存。</li></ul></details><h3 id="keep-alive-相关的生命周期函数是什么-什么场景下会进行使用" tabindex="-1">keep-alive 相关的生命周期函数是什么，什么场景下会进行使用 <a class="header-anchor" href="#keep-alive-相关的生命周期函数是什么-什么场景下会进行使用" aria-label="Permalink to &quot;keep-alive 相关的生命周期函数是什么，什么场景下会进行使用&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>受 keep-alive 的影响，其内部所有嵌套的组件都具有两个生命周期钩子函数，分别是 <code>activated</code> 和 <code>deactivated</code>，它们分别在<code>组件激活</code>和<code>组件失活</code>时触发。<strong>第一次 activated 触发是在 mounted 之后</strong>。</p></details><h3 id="keep-alive-实现原理" tabindex="-1">keep-alive 实现原理 <a class="header-anchor" href="#keep-alive-实现原理" aria-label="Permalink to &quot;keep-alive 实现原理&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><p>在具体的实现上，keep-alive 在<strong>内部维护了一个 key 数组和一个缓存对象</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// keep-alive 内部的生命周期函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>key 数组记录目前缓存的组件 key 值，如果组件没有指定 key 值，则会为其自动生成一个唯一的 key 值</li><li>cache 对象以 key 值为键，vnode 为值，用于缓存组件对应的虚拟 DOM</li><li>在 keep-alive 的渲染函数中，其基本逻辑是判断当前渲染的 vnode 是否有对应的缓存，如果有，从缓存中读取到对应的组件实例；如果没有则将其缓存。</li><li>当缓存数量超过 max 数值时，keep-alive 会移除掉 key 数组的第一个元素。</li></ul></details><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="vue-中组件-component-和插件-plugin-有什么区别" tabindex="-1">Vue 中组件 Component 和插件 Plugin 有什么区别 <a class="header-anchor" href="#vue-中组件-component-和插件-plugin-有什么区别" aria-label="Permalink to &quot;Vue 中组件 Component 和插件 Plugin 有什么区别&quot;">​</a></h3><details class="details custom-block"><summary>详细信息</summary><ul><li><p>组件</p><p>把一个页面分成多个模块，每个模块都可以看做是一个组件，或者把一些<code>公共的模块抽离出来</code>，<code>方便复用</code>提高可维护性，降低整个系统的耦合度。</p></li><li><p>插件</p><p>插件 (Plugins) 是一种能为 <code>Vue 添加全局功能的工具代码</code>，对 Vue 功能的增强和补充</p></li></ul><p>两者区别</p><ul><li><p>编写形式</p><ul><li>组件 .vue 文件（html、css、js 代码）</li><li>插件需暴露一个 install 方法</li></ul></li><li><p>注册形式</p><ul><li>组件可以通过全局注册与局部注册（Vue.component）</li><li>插件需要 Vue.use（）</li></ul></li></ul></details><h3 id="eventbus-与-mitt-区别" tabindex="-1">EventBus 与 mitt 区别 <a class="header-anchor" href="#eventbus-与-mitt-区别" aria-label="Permalink to &quot;EventBus 与 mitt 区别&quot;">​</a></h3>`,37),h={class:"details custom-block"},r=s("summary",null,"详细信息",-1),k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.586ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 1585 1000","aria-hidden":"true"},o=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1085,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g></g></g>',1),c=[o],E=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"o"),s("mi",null,"n"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"/")])])],-1),u=s("p",null,[i("而 Vue3 中移除了这些相关方法，这意味着 "),s("code",null,"EventBus"),i(" 这种方式我们使用不了， Vue3 推荐尽可能使用 "),s("code",null,"props/emits"),i("、"),s("code",null,"provide/inject"),i("、"),s("code",null,"vuex"),i(" 等其他方式来替代。 当然，如果 Vue3 内部的方式无法满足你，官方建议使用一些外部的辅助库，例如："),s("code",null,"mitt"),i("。")],-1),m=s("h2",{id:"参考",tabindex:"-1"},[i("参考 "),s("a",{class:"header-anchor",href:"#参考","aria-label":'Permalink to "参考"'},"​")],-1),g=s("ul",null,[s("li",null,[s("a",{href:"https://juejin.cn/post/7227453567686033468?from=search-suggest#heading-14",target:"_blank",rel:"noreferrer"},"vue3 面试题八股集合——2023")])],-1);function b(y,v,F,_,f,x){return e(),a("div",null,[p,s("details",h,[r,s("p",null,[i("Vue2 中我们使用 EventBus 来实现跨组件之间的一些通信，它依赖于 Vue 自带的 "),s("mjx-container",k,[(e(),a("svg",d,c)),E]),i("emit/$off 等方法，这种方式使用非常简单方便，但如果使用不当也会带来难以维护的毁灭灾难。")]),u]),m,g])}const A=l(t,[["render",b]]);export{q as __pageData,A as default};
