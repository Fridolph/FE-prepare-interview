import{_ as t,E as e,c as o,J as l,V as a,o as i}from"./chunks/framework.ig3M3oij.js";const f=JSON.parse('{"title":"基数排序 Radix Sort","description":"","frontmatter":{},"headers":[],"relativePath":"直击概念/03algo/s_sort_10-radixSort.md","filePath":"直击概念/03algo/s_sort_10-radixSort.md","lastUpdated":1708093373000}'),s={name:"直击概念/03algo/s_sort_10-radixSort.md"},n=a('<h1 id="基数排序-radix-sort" tabindex="-1">基数排序 Radix Sort <a class="header-anchor" href="#基数排序-radix-sort" aria-label="Permalink to &quot;基数排序 Radix Sort&quot;">​</a></h1><blockquote><p>基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为 O(kn),为数组长度，k 为数组中的数的最大的位数</p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p><h2 id="算法描述" tabindex="-1">算法描述 <a class="header-anchor" href="#算法描述" aria-label="Permalink to &quot;算法描述&quot;">​</a></h2><ol><li>取得数组中的最大数，并取得位数；</li><li>arr 为原始数组，从最低位开始取每个位组成 radix 数组；</li><li>对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；</li></ol>',6),_=a('<h2 id="算法实现" tabindex="-1">算法实现 <a class="header-anchor" href="#算法实现" aria-label="Permalink to &quot;算法实现&quot;">​</a></h2><p><a href="./../../编写代码/03algo/c_sort_10-radixSort/c_sort_10-radixSort.html">基数排序</a></p><h2 id="算法分析" tabindex="-1">算法分析 <a class="header-anchor" href="#算法分析" aria-label="Permalink to &quot;算法分析&quot;">​</a></h2><ul><li>最佳情况：T(n) = O(n * k)</li><li>最差情况：T(n) = O(n * k)</li><li>平均情况：T(n) = O(n * k)</li></ul><p>基数排序有两种方法：</p><ul><li>MSD 从高位开始进行排序</li><li>LSD 从低位开始进行排序</li></ul><h3 id="基数排序-vs-计数排序-vs-桶排序" tabindex="-1">基数排序 vs 计数排序 vs 桶排序 <a class="header-anchor" href="#基数排序-vs-计数排序-vs-桶排序" aria-label="Permalink to &quot;基数排序 vs 计数排序 vs 桶排序&quot;">​</a></h3><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶</li><li>计数排序：每个桶只存储单一键值</li><li>桶排序：每个桶存储一定范围的数值</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903444365443080" target="_blank" rel="noreferrer">十大经典排序算法总结（JavaScript 描述）</a></li></ul>',11);function d(h,c,u,p,x,m){const r=e("Image");return i(),o("div",null,[n,l(r,{alt:"基数排序动图演示",src:"/03algo/radixSort.gif"}),_])}const b=t(s,[["render",d]]);export{f as __pageData,b as default};
